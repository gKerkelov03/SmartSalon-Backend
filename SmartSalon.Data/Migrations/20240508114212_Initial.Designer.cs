// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartSalon.Data;

#nullable disable

namespace SmartSalon.Data.Migrations
{
    [DbContext(typeof(SmartSalonDbContext))]
    [Migration("20240508114212_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CurrencySalon", b =>
                {
                    b.Property<Guid>("AcceptedCurrenciesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SalonsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AcceptedCurrenciesId", "SalonsId");

                    b.HasIndex("SalonsId");

                    b.ToTable("CurrencySalon");
                });

            modelBuilder.Entity("CustomerSubscription", b =>
                {
                    b.Property<Guid>("ActiveCustomersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubscriptionsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ActiveCustomersId", "SubscriptionsId");

                    b.HasIndex("SubscriptionsId");

                    b.ToTable("CustomerSubscription");
                });

            modelBuilder.Entity("JobTitleService", b =>
                {
                    b.Property<Guid>("JobTitlesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServicesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("JobTitlesId", "ServicesId");

                    b.HasIndex("ServicesId");

                    b.ToTable("JobTitleService");
                });

            modelBuilder.Entity("JobTitleWorker", b =>
                {
                    b.Property<Guid>("JobTitlesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WorkersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("JobTitlesId", "WorkersId");

                    b.HasIndex("WorkersId");

                    b.ToTable("JobTitleWorker");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("Logins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("3f685e89-8c61-47c0-b9a6-e96c279798de"),
                            RoleId = new Guid("7751b427-09fb-4ee9-bfdb-a1c0a803459a")
                        },
                        new
                        {
                            UserId = new Guid("3f685e89-8c61-47c0-b9a6-e96c279798de"),
                            RoleId = new Guid("74827b6c-3a86-461e-afc1-d9ebf7fe7fed")
                        },
                        new
                        {
                            UserId = new Guid("ea916748-33a8-4785-a883-9e1c449d7f22"),
                            RoleId = new Guid("7751b427-09fb-4ee9-bfdb-a1c0a803459a")
                        },
                        new
                        {
                            UserId = new Guid("ea916748-33a8-4785-a883-9e1c449d7f22"),
                            RoleId = new Guid("74827b6c-3a86-461e-afc1-d9ebf7fe7fed")
                        });
                });

            modelBuilder.Entity("OwnerSalon", b =>
                {
                    b.Property<Guid>("OwnersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SalonsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OwnersId", "SalonsId");

                    b.HasIndex("SalonsId");

                    b.ToTable("OwnerSalon");
                });

            modelBuilder.Entity("SalonWorker", b =>
                {
                    b.Property<Guid>("SalonsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WorkersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SalonsId", "WorkersId");

                    b.HasIndex("WorkersId");

                    b.ToTable("SalonWorker");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Bookings.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Done")
                        .HasColumnType("bit");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SalonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.Property<Guid>("WorkerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SalonId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("WorkerId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Bookings.SpecialSlot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<int>("ExpirationInDays")
                        .HasColumnType("int");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.Property<Guid?>("SubscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("SpecialSlots");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Bookings.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AllowedBookingsInAdvance")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<Guid>("SalonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Tier")
                        .HasColumnType("int");

                    b.Property<int>("TimePenaltyInDays")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SalonId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Salons.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d398b870-359c-4065-ba1d-7d77f366cb44"),
                            Code = "BTC",
                            Name = "Bitcoin"
                        },
                        new
                        {
                            Id = new Guid("961a3462-1a23-40a6-9389-37fcf7cc6822"),
                            Code = "ETH",
                            Name = "Ethereum"
                        },
                        new
                        {
                            Id = new Guid("70cf26af-0803-4543-a093-0d45bcb837a6"),
                            Code = "USD",
                            Country = "United States",
                            Name = "United States Dollar"
                        },
                        new
                        {
                            Id = new Guid("70228ac0-6ef4-45f4-bfdd-6e55a13e4487"),
                            Code = "EUR",
                            Country = "Eurozone",
                            Name = "Euro"
                        },
                        new
                        {
                            Id = new Guid("f5a39241-b07a-4969-96ee-5ff93d30d80f"),
                            Code = "GBP",
                            Country = "United Kingdom",
                            Name = "British Pound Sterling"
                        },
                        new
                        {
                            Id = new Guid("e7cdc6e2-f441-4fcc-8267-5230e68af8ab"),
                            Code = "JPY",
                            Country = "Japan",
                            Name = "Japanese Yen"
                        },
                        new
                        {
                            Id = new Guid("1b7119cd-8fe1-48d4-a20d-5b62803d843c"),
                            Code = "AUD",
                            Country = "Australia",
                            Name = "Australian Dollar"
                        },
                        new
                        {
                            Id = new Guid("dc189a94-7dba-4591-9ab3-2e4dc023b585"),
                            Code = "CAD",
                            Country = "Canada",
                            Name = "Canadian Dollar"
                        },
                        new
                        {
                            Id = new Guid("c20a3a0d-5ef2-4f3d-a0d4-379b329190e1"),
                            Code = "CHF",
                            Country = "Switzerland",
                            Name = "Swiss Franc"
                        },
                        new
                        {
                            Id = new Guid("190ea253-ae1e-4d97-86ac-fb352e4bf65e"),
                            Code = "CNY",
                            Country = "China",
                            Name = "Chinese Yuan"
                        },
                        new
                        {
                            Id = new Guid("f6c21b92-c010-49b3-b4f6-8787fac7d76b"),
                            Code = "INR",
                            Country = "India",
                            Name = "Indian Rupee"
                        },
                        new
                        {
                            Id = new Guid("f6cf6001-fa40-494d-9881-12adb3330a23"),
                            Code = "BRL",
                            Country = "Brazil",
                            Name = "Brazilian Real"
                        },
                        new
                        {
                            Id = new Guid("271fc71f-d890-4657-a659-03f628711736"),
                            Code = "KRW",
                            Country = "South Korea",
                            Name = "South Korean Won"
                        },
                        new
                        {
                            Id = new Guid("3c8fb0cb-783d-48a5-a8ad-545ac8cdb2e7"),
                            Code = "RUB",
                            Country = "Russia",
                            Name = "Russian Ruble"
                        },
                        new
                        {
                            Id = new Guid("c3d70c29-05d8-4781-aced-049ae6fcb813"),
                            Code = "MXN",
                            Country = "Mexico",
                            Name = "Mexican Peso"
                        },
                        new
                        {
                            Id = new Guid("57fdd427-5fdd-4ae4-80e0-5eff11a37d5b"),
                            Code = "ZAR",
                            Country = "South Africa",
                            Name = "South African Rand"
                        },
                        new
                        {
                            Id = new Guid("3b822ddf-8ccd-4d14-aee8-f2234844543f"),
                            Code = "NZD",
                            Country = "New Zealand",
                            Name = "New Zealand Dollar"
                        },
                        new
                        {
                            Id = new Guid("dba531d2-2720-4a60-a905-8dd6e552f311"),
                            Code = "SGD",
                            Country = "Singapore",
                            Name = "Singapore Dollar"
                        },
                        new
                        {
                            Id = new Guid("aa29153a-28dd-401c-8f0a-e97b13076fbf"),
                            Code = "HKD",
                            Country = "Hong Kong",
                            Name = "Hong Kong Dollar"
                        },
                        new
                        {
                            Id = new Guid("483d6494-f73b-4cb3-9b76-13dc63e67f99"),
                            Code = "SEK",
                            Country = "Sweden",
                            Name = "Swedish Krona"
                        },
                        new
                        {
                            Id = new Guid("b5e3f125-4f87-460d-8141-276fb8cce9a2"),
                            Code = "NOK",
                            Country = "Norway",
                            Name = "Norwegian Krone"
                        },
                        new
                        {
                            Id = new Guid("bceec1d7-c712-40d3-a8b8-3f1bdf4b61e2"),
                            Code = "TRY",
                            Country = "Turkey",
                            Name = "Turkish Lira"
                        },
                        new
                        {
                            Id = new Guid("67d9428c-2d9f-4035-8f18-916e59200e33"),
                            Code = "ARS",
                            Country = "Argentina",
                            Name = "Argentine Peso"
                        },
                        new
                        {
                            Id = new Guid("5c4da8a3-1505-4070-b26c-d9fe7f3eb4cf"),
                            Code = "DKK",
                            Country = "Denmark",
                            Name = "Danish Krone"
                        },
                        new
                        {
                            Id = new Guid("09474154-7873-4d38-a807-02b1d0b868ce"),
                            Code = "PLN",
                            Country = "Poland",
                            Name = "Polish Zloty"
                        },
                        new
                        {
                            Id = new Guid("f9df2d7c-9726-4b3a-890e-b1e2cd19615c"),
                            Code = "ILS",
                            Country = "Israel",
                            Name = "Israeli New Shekel"
                        },
                        new
                        {
                            Id = new Guid("1d7b48f3-3899-4ad8-92d7-a5edab0d00fe"),
                            Code = "SAR",
                            Country = "Saudi Arabia",
                            Name = "Saudi Riyal"
                        },
                        new
                        {
                            Id = new Guid("e823095c-dcfe-44a2-b1f6-832068fd9861"),
                            Code = "AED",
                            Country = "United Arab Emirates",
                            Name = "UAE Dirham"
                        },
                        new
                        {
                            Id = new Guid("a3677c09-7ab1-46d8-9dc7-75e89621f062"),
                            Code = "THB",
                            Country = "Thailand",
                            Name = "Thai Baht"
                        },
                        new
                        {
                            Id = new Guid("30a0fc5f-e8db-42ca-bb2a-b5bf9bb8e500"),
                            Code = "MYR",
                            Country = "Malaysia",
                            Name = "Malaysian Ringgit"
                        },
                        new
                        {
                            Id = new Guid("8252f121-e5dc-4697-8f6b-4679eb4a069f"),
                            Code = "IDR",
                            Country = "Indonesia",
                            Name = "Indonesian Rupiah"
                        },
                        new
                        {
                            Id = new Guid("74823046-f5c5-4c1a-9243-a543ee34b97b"),
                            Code = "PHP",
                            Country = "Philippines",
                            Name = "Philippine Peso"
                        },
                        new
                        {
                            Id = new Guid("1929324c-892c-4e94-b499-ab02a01ce38f"),
                            Code = "BGN",
                            Country = "Bulgaria",
                            Name = "Bulgarian Lev"
                        });
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Salons.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("SalonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SalonId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Salons.JobTitle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SalonId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SalonId");

                    b.ToTable("JobTitles");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Salons.Salon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BookingsInAdvance")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("MainCurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SubscriptionsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("TimePenalty")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.Property<bool>("WorkersCanDeleteBookings")
                        .HasColumnType("bit");

                    b.Property<bool>("WorkersCanMoveBookings")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("WorkersCanSetNonWorkingPeriods")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<Guid>("WorkingTimeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MainCurrencyId");

                    b.ToTable("Salons");

                    b.HasData(
                        new
                        {
                            Id = new Guid("216061ac-3614-450b-bf36-825d499ea89b"),
                            BookingsInAdvance = 5,
                            Description = "Description",
                            IsDeleted = false,
                            Location = "Location",
                            MainCurrencyId = new Guid("1929324c-892c-4e94-b499-ab02a01ce38f"),
                            Name = "Cosa Nostra",
                            SubscriptionsEnabled = true,
                            TimePenalty = 5,
                            WorkersCanDeleteBookings = false,
                            WorkersCanMoveBookings = true,
                            WorkersCanSetNonWorkingPeriods = true,
                            WorkingTimeId = new Guid("4a727edd-4953-4505-8a45-d9b78a68b26f")
                        },
                        new
                        {
                            Id = new Guid("e6f3364d-699d-415f-906b-71e2304b43d5"),
                            BookingsInAdvance = 5,
                            Description = "Description",
                            IsDeleted = false,
                            Location = "Location",
                            MainCurrencyId = new Guid("1929324c-892c-4e94-b499-ab02a01ce38f"),
                            Name = "Gosho shop",
                            SubscriptionsEnabled = true,
                            TimePenalty = 5,
                            WorkersCanDeleteBookings = false,
                            WorkersCanMoveBookings = true,
                            WorkersCanSetNonWorkingPeriods = true,
                            WorkingTimeId = new Guid("d099c161-25b4-428f-843d-5a6a20b227a2")
                        });
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Salons.Specialty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("SalonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("SalonId");

                    b.ToTable("Specialties");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Salons.WorkingTime", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeOnly>("FridayClosingTime")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("FridayOpeningTime")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("MondayClosingTime")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("MondayOpeningTime")
                        .HasColumnType("time");

                    b.Property<Guid>("SalonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeOnly>("SaturdayClosingTime")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("SaturdayOpeningTime")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("SundayClosingTime")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("SundayOpeningTime")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("ThursdayClosingTime")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("ThursdayOpeningTime")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("TuesdayClosingTime")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("TuesdayOpeningTime")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("WednesdayClosingTime")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("WednesdayOpeningTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("SalonId")
                        .IsUnique();

                    b.ToTable("WorkingTimes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4a727edd-4953-4505-8a45-d9b78a68b26f"),
                            FridayClosingTime = new TimeOnly(19, 0, 0),
                            FridayOpeningTime = new TimeOnly(7, 0, 0),
                            MondayClosingTime = new TimeOnly(19, 0, 0),
                            MondayOpeningTime = new TimeOnly(7, 0, 0),
                            SalonId = new Guid("216061ac-3614-450b-bf36-825d499ea89b"),
                            SaturdayClosingTime = new TimeOnly(19, 0, 0),
                            SaturdayOpeningTime = new TimeOnly(7, 0, 0),
                            SundayClosingTime = new TimeOnly(19, 0, 0),
                            SundayOpeningTime = new TimeOnly(7, 0, 0),
                            ThursdayClosingTime = new TimeOnly(19, 0, 0),
                            ThursdayOpeningTime = new TimeOnly(7, 0, 0),
                            TuesdayClosingTime = new TimeOnly(19, 0, 0),
                            TuesdayOpeningTime = new TimeOnly(7, 0, 0),
                            WednesdayClosingTime = new TimeOnly(19, 0, 0),
                            WednesdayOpeningTime = new TimeOnly(7, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("d099c161-25b4-428f-843d-5a6a20b227a2"),
                            FridayClosingTime = new TimeOnly(19, 0, 0),
                            FridayOpeningTime = new TimeOnly(7, 0, 0),
                            MondayClosingTime = new TimeOnly(19, 0, 0),
                            MondayOpeningTime = new TimeOnly(7, 0, 0),
                            SalonId = new Guid("e6f3364d-699d-415f-906b-71e2304b43d5"),
                            SaturdayClosingTime = new TimeOnly(19, 0, 0),
                            SaturdayOpeningTime = new TimeOnly(7, 0, 0),
                            SundayClosingTime = new TimeOnly(19, 0, 0),
                            SundayOpeningTime = new TimeOnly(7, 0, 0),
                            ThursdayClosingTime = new TimeOnly(19, 0, 0),
                            ThursdayOpeningTime = new TimeOnly(7, 0, 0),
                            TuesdayClosingTime = new TimeOnly(19, 0, 0),
                            TuesdayOpeningTime = new TimeOnly(7, 0, 0),
                            WednesdayClosingTime = new TimeOnly(19, 0, 0),
                            WednesdayOpeningTime = new TimeOnly(7, 0, 0)
                        });
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Services.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<Guid>("SalonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SectionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SalonId");

                    b.HasIndex("SectionId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Services.Section", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SalonId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SalonId");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Services.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("DurationInMinutes")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid>("SalonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SubscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SalonId");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Users.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("74827b6c-3a86-461e-afc1-d9ebf7fe7fed"),
                            ConcurrencyStamp = "6600dbaa-4109-453b-bf30-23dac5d56e84",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = new Guid("ccf57d36-e4d9-48e6-93ef-1ed120008895"),
                            ConcurrencyStamp = "7142944d-342c-425d-9763-bf5ac0675f14",
                            Name = "Owner",
                            NormalizedName = "OWNER"
                        },
                        new
                        {
                            Id = new Guid("1f8e8921-5afa-4bd2-8bb2-e4b6d6809e53"),
                            ConcurrencyStamp = "fc8fbd17-6ef1-4b34-acce-2517a3c85697",
                            Name = "Worker",
                            NormalizedName = "WORKER"
                        },
                        new
                        {
                            Id = new Guid("7751b427-09fb-4ee9-bfdb-a1c0a803459a"),
                            ConcurrencyStamp = "412a4ca9-2c4e-4bb6-8997-2d9b56f147e6",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePictureUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", (string)null);

                    b.HasDiscriminator<string>("UserType").HasValue("Admin");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = new Guid("3f685e89-8c61-47c0-b9a6-e96c279798de"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e1042945-7d05-4dac-8f75-cca04c9b1ce8",
                            Email = "gkerkelov03@abv.bg",
                            EmailConfirmed = true,
                            FirstName = "Georgi",
                            LastName = "Kerkelov",
                            LockoutEnabled = false,
                            NormalizedEmail = "GKERKELOV03@ABV.BG",
                            NormalizedUserName = "GKERKELOV03@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEAFJZigcoM++TBG4fKnIfY1BrxkkgA1bfXB/7Q8Dz8EWtGdYOstTjO9SjDU771Ws5w==",
                            PhoneNumber = "0895105609",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://res.cloudinary.com/donhvedgr/image/upload/v1662969813/blank-profile-picture_cqowyq.webp",
                            SecurityStamp = "a13d29a0-b03a-495f-8325-e89a4e364375",
                            TwoFactorEnabled = false,
                            UserName = "gkerkelov03@abv.bg"
                        },
                        new
                        {
                            Id = new Guid("ea916748-33a8-4785-a883-9e1c449d7f22"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a31678dd-8cd5-4edd-af7f-433f63c5cc73",
                            Email = "pivanov03@abv.bg",
                            EmailConfirmed = true,
                            FirstName = "Petar",
                            LastName = "Ivanov",
                            LockoutEnabled = false,
                            NormalizedEmail = "PIVANOV03@ABV.BG",
                            NormalizedUserName = "PIVANOV03@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEImpNmtfwuKPZE+Bxov/OdWtIsxLamrnezlqeaoy8dw2xZBlH16OVWHmc8gP+OjkVw==",
                            PhoneNumber = "0899829897",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://res.cloudinary.com/donhvedgr/image/upload/v1662969813/blank-profile-picture_cqowyq.webp",
                            SecurityStamp = "380c0786-f70e-4895-a71b-fc42f3160365",
                            TwoFactorEnabled = false,
                            UserName = "pivanov03@abv.bg"
                        });
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Users.Customer", b =>
                {
                    b.HasBaseType("SmartSalon.Application.Domain.Users.User");

                    b.HasDiscriminator().HasValue("Customer");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Users.Owner", b =>
                {
                    b.HasBaseType("SmartSalon.Application.Domain.Users.User");

                    b.HasDiscriminator().HasValue("Owner");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Users.Worker", b =>
                {
                    b.HasBaseType("SmartSalon.Application.Domain.Users.User");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasDiscriminator().HasValue("Worker");
                });

            modelBuilder.Entity("CurrencySalon", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Salons.Currency", null)
                        .WithMany()
                        .HasForeignKey("AcceptedCurrenciesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartSalon.Application.Domain.Salons.Salon", null)
                        .WithMany()
                        .HasForeignKey("SalonsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("CustomerSubscription", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Users.Customer", null)
                        .WithMany()
                        .HasForeignKey("ActiveCustomersId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartSalon.Application.Domain.Bookings.Subscription", null)
                        .WithMany()
                        .HasForeignKey("SubscriptionsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("JobTitleService", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Salons.JobTitle", null)
                        .WithMany()
                        .HasForeignKey("JobTitlesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartSalon.Application.Domain.Services.Service", null)
                        .WithMany()
                        .HasForeignKey("ServicesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("JobTitleWorker", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Salons.JobTitle", null)
                        .WithMany()
                        .HasForeignKey("JobTitlesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartSalon.Application.Domain.Users.Worker", null)
                        .WithMany()
                        .HasForeignKey("WorkersId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Users.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartSalon.Application.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("OwnerSalon", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Users.Owner", null)
                        .WithMany()
                        .HasForeignKey("OwnersId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartSalon.Application.Domain.Salons.Salon", null)
                        .WithMany()
                        .HasForeignKey("SalonsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SalonWorker", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Salons.Salon", null)
                        .WithMany()
                        .HasForeignKey("SalonsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartSalon.Application.Domain.Users.Worker", null)
                        .WithMany()
                        .HasForeignKey("WorkersId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Bookings.Booking", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Users.Customer", "Customer")
                        .WithMany("Bookings")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartSalon.Application.Domain.Salons.Salon", "Salon")
                        .WithMany()
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartSalon.Application.Domain.Services.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartSalon.Application.Domain.Users.Worker", "Worker")
                        .WithMany("Calendar")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Salon");

                    b.Navigation("Service");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Bookings.SpecialSlot", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Services.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartSalon.Application.Domain.Bookings.Subscription", null)
                        .WithMany("SpecialSlots")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Service");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Bookings.Subscription", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Salons.Salon", "Salon")
                        .WithMany()
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Salon");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Salons.Image", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Salons.Salon", "Salon")
                        .WithMany("Images")
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Salon");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Salons.JobTitle", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Salons.Salon", "Salon")
                        .WithMany("JobTitles")
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Salon");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Salons.Salon", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Salons.Currency", "MainCurrency")
                        .WithMany()
                        .HasForeignKey("MainCurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MainCurrency");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Salons.Specialty", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Salons.Salon", "Salon")
                        .WithMany("Specialties")
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Salon");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Salons.WorkingTime", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Salons.Salon", "Salon")
                        .WithOne("WorkingTime")
                        .HasForeignKey("SmartSalon.Application.Domain.Salons.WorkingTime", "SalonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Salon");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Services.Category", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Salons.Salon", "Salon")
                        .WithMany()
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartSalon.Application.Domain.Services.Section", "Section")
                        .WithMany("Categories")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Salon");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Services.Section", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Salons.Salon", "Salon")
                        .WithMany("Sections")
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Salon");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Services.Service", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Services.Category", "Category")
                        .WithMany("Services")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartSalon.Application.Domain.Salons.Salon", "Salon")
                        .WithMany()
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartSalon.Application.Domain.Bookings.Subscription", null)
                        .WithMany("ServicesIncluded")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Category");

                    b.Navigation("Salon");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Bookings.Subscription", b =>
                {
                    b.Navigation("ServicesIncluded");

                    b.Navigation("SpecialSlots");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Salons.Salon", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("JobTitles");

                    b.Navigation("Sections");

                    b.Navigation("Specialties");

                    b.Navigation("WorkingTime");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Services.Category", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Services.Section", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Users.Customer", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Users.Worker", b =>
                {
                    b.Navigation("Calendar");
                });
#pragma warning restore 612, 618
        }
    }
}
