// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartSalon.Data;

#nullable disable

namespace SmartSalon.Data.Migrations
{
    [DbContext(typeof(SmartSalonDbContext))]
    [Migration("20240519130638_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CurrencySalon", b =>
                {
                    b.Property<Guid>("OtherAcceptedCurrenciesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SalonsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OtherAcceptedCurrenciesId", "SalonsId");

                    b.HasIndex("SalonsId");

                    b.ToTable("CurrencySalon");
                });

            modelBuilder.Entity("CustomerSubscription", b =>
                {
                    b.Property<Guid>("ActiveCustomersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubscriptionsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ActiveCustomersId", "SubscriptionsId");

                    b.HasIndex("SubscriptionsId");

                    b.ToTable("CustomerSubscription");
                });

            modelBuilder.Entity("JobTitleService", b =>
                {
                    b.Property<Guid>("JobTitlesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServicesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("JobTitlesId", "ServicesId");

                    b.HasIndex("ServicesId");

                    b.ToTable("JobTitleService");
                });

            modelBuilder.Entity("JobTitleWorker", b =>
                {
                    b.Property<Guid>("JobTitlesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WorkersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("JobTitlesId", "WorkersId");

                    b.HasIndex("WorkersId");

                    b.ToTable("JobTitleWorker");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("Logins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("99aebbfd-56b5-4bb7-bfc3-d258edbd7a10"),
                            RoleId = new Guid("095728b6-906f-4139-b72d-9cf2c9b2a081")
                        },
                        new
                        {
                            UserId = new Guid("99aebbfd-56b5-4bb7-bfc3-d258edbd7a10"),
                            RoleId = new Guid("7d63bf28-e9a1-4a9e-b2af-afaad758dc43")
                        },
                        new
                        {
                            UserId = new Guid("b8c22ce7-1048-450f-95a9-3d524a27bcaa"),
                            RoleId = new Guid("095728b6-906f-4139-b72d-9cf2c9b2a081")
                        },
                        new
                        {
                            UserId = new Guid("b8c22ce7-1048-450f-95a9-3d524a27bcaa"),
                            RoleId = new Guid("7d63bf28-e9a1-4a9e-b2af-afaad758dc43")
                        });
                });

            modelBuilder.Entity("OwnerSalon", b =>
                {
                    b.Property<Guid>("OwnersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SalonsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OwnersId", "SalonsId");

                    b.HasIndex("SalonsId");

                    b.ToTable("OwnerSalon");
                });

            modelBuilder.Entity("SalonWorker", b =>
                {
                    b.Property<Guid>("SalonsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WorkersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SalonsId", "WorkersId");

                    b.HasIndex("WorkersId");

                    b.ToTable("SalonWorker");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Bookings.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Done")
                        .HasColumnType("bit");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SalonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.Property<Guid>("WorkerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SalonId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("WorkerId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Bookings.SpecialSlot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<int>("ExpirationInDays")
                        .HasColumnType("int");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.Property<Guid?>("SubscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("SpecialSlots");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Bookings.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AllowedBookingsInAdvance")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<Guid>("SalonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Tier")
                        .HasColumnType("int");

                    b.Property<int>("TimePenaltyInDays")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SalonId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Salons.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("31d35ea1-9c50-4c22-be06-982b16902d0f"),
                            Code = "BTC",
                            LogoUrl = "https://upload.wikimedia.org/wikipedia/commons/thumb/4/46/Bitcoin.svg/2048px-Bitcoin.svg.png",
                            Name = "Bitcoin"
                        },
                        new
                        {
                            Id = new Guid("90a932c8-20d4-4e05-a012-ec6a7cca0576"),
                            Code = "ETH",
                            LogoUrl = "https://upload.wikimedia.org/wikipedia/commons/thumb/0/05/Ethereum_logo_2014.svg/1257px-Ethereum_logo_2014.svg.png",
                            Name = "Ethereum"
                        },
                        new
                        {
                            Id = new Guid("18c9d20f-eb19-4dc3-9bd3-676b8d6c1897"),
                            Code = "USD",
                            Country = "United States",
                            LogoUrl = "https://upload.wikimedia.org/wikipedia/commons/thumb/a/a9/Flag_of_the_United_States_%28DoS_ECA_Color_Standard%29.svg/255px-Flag_of_the_United_States_%28DoS_ECA_Color_Standard%29.svg.png",
                            Name = "United States Dollar"
                        },
                        new
                        {
                            Id = new Guid("dca9fbca-6b89-4336-ac3f-b90e9d399f3b"),
                            Code = "EUR",
                            Country = "Eurozone",
                            LogoUrl = "https://upload.wikimedia.org/wikipedia/commons/thumb/b/b7/Flag_of_Europe.svg/255px-Flag_of_Europe.svg.png",
                            Name = "Euro"
                        },
                        new
                        {
                            Id = new Guid("e0786d90-115e-4b53-8717-f860696dfc26"),
                            Code = "BGN",
                            Country = "Bulgaria",
                            LogoUrl = "https://upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Flag_of_Bulgaria.svg/255px-Flag_of_Bulgaria.svg.png",
                            Name = "Bulgarian Lev"
                        });
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Salons.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("SalonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SalonId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Salons.JobTitle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SalonId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SalonId");

                    b.ToTable("JobTitles");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Salons.Salon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BookingsInAdvance")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("GoogleMapsLocation")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MainCurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SubscriptionsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("TimePenalty")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.Property<bool>("WorkersCanDeleteBookings")
                        .HasColumnType("bit");

                    b.Property<bool>("WorkersCanMoveBookings")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("WorkersCanSetNonWorkingPeriods")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<Guid>("WorkingTimeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MainCurrencyId");

                    b.ToTable("Salons");

                    b.HasData(
                        new
                        {
                            Id = new Guid("83bc5d48-ea1b-4a96-9a7d-1d0ce2c72fb7"),
                            BookingsInAdvance = 5,
                            Country = "BULGARIA",
                            Description = "Description",
                            GoogleMapsLocation = "София център, ул. „Георги Бенковски“ 11",
                            IsDeleted = false,
                            Latitude = "42.698529",
                            Longitude = "23.328659",
                            MainCurrencyId = new Guid("e0786d90-115e-4b53-8717-f860696dfc26"),
                            Name = "Cosa Nostra",
                            SubscriptionsEnabled = true,
                            TimePenalty = 5,
                            WorkersCanDeleteBookings = false,
                            WorkersCanMoveBookings = true,
                            WorkersCanSetNonWorkingPeriods = true,
                            WorkingTimeId = new Guid("8ca7b85f-9ee4-4e9e-890c-8b29e364da7b")
                        },
                        new
                        {
                            Id = new Guid("13dbc57a-cfdf-4229-8fa5-be7aba0e16e8"),
                            BookingsInAdvance = 5,
                            Country = "BULGARIA",
                            Description = "Description",
                            GoogleMapsLocation = "Студентски Комплекс, 1700 София",
                            IsDeleted = false,
                            Latitude = "42.698529",
                            Longitude = "23.328659",
                            MainCurrencyId = new Guid("e0786d90-115e-4b53-8717-f860696dfc26"),
                            Name = "Gosho shop",
                            SubscriptionsEnabled = true,
                            TimePenalty = 5,
                            WorkersCanDeleteBookings = false,
                            WorkersCanMoveBookings = true,
                            WorkersCanSetNonWorkingPeriods = true,
                            WorkingTimeId = new Guid("8041bfe3-78b7-406c-91ef-647b066a0b28")
                        });
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Salons.Specialty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("SalonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("SalonId");

                    b.ToTable("Specialties");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Salons.WorkingTime", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeOnly>("FridayClosingTime")
                        .HasColumnType("time");

                    b.Property<bool>("FridayIsWorking")
                        .HasColumnType("bit");

                    b.Property<TimeOnly>("FridayOpeningTime")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("MondayClosingTime")
                        .HasColumnType("time");

                    b.Property<bool>("MondayIsWorking")
                        .HasColumnType("bit");

                    b.Property<TimeOnly>("MondayOpeningTime")
                        .HasColumnType("time");

                    b.Property<Guid>("SalonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeOnly>("SaturdayClosingTime")
                        .HasColumnType("time");

                    b.Property<bool>("SaturdayIsWorking")
                        .HasColumnType("bit");

                    b.Property<TimeOnly>("SaturdayOpeningTime")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("SundayClosingTime")
                        .HasColumnType("time");

                    b.Property<bool>("SundayIsWorking")
                        .HasColumnType("bit");

                    b.Property<TimeOnly>("SundayOpeningTime")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("ThursdayClosingTime")
                        .HasColumnType("time");

                    b.Property<bool>("ThursdayIsWorking")
                        .HasColumnType("bit");

                    b.Property<TimeOnly>("ThursdayOpeningTime")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("TuesdayClosingTime")
                        .HasColumnType("time");

                    b.Property<bool>("TuesdayIsWorking")
                        .HasColumnType("bit");

                    b.Property<TimeOnly>("TuesdayOpeningTime")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("WednesdayClosingTime")
                        .HasColumnType("time");

                    b.Property<bool>("WednesdayIsWorking")
                        .HasColumnType("bit");

                    b.Property<TimeOnly>("WednesdayOpeningTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("SalonId")
                        .IsUnique();

                    b.ToTable("WorkingTimes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8ca7b85f-9ee4-4e9e-890c-8b29e364da7b"),
                            FridayClosingTime = new TimeOnly(19, 0, 0),
                            FridayIsWorking = false,
                            FridayOpeningTime = new TimeOnly(7, 0, 0),
                            MondayClosingTime = new TimeOnly(19, 0, 0),
                            MondayIsWorking = false,
                            MondayOpeningTime = new TimeOnly(7, 0, 0),
                            SalonId = new Guid("83bc5d48-ea1b-4a96-9a7d-1d0ce2c72fb7"),
                            SaturdayClosingTime = new TimeOnly(19, 0, 0),
                            SaturdayIsWorking = false,
                            SaturdayOpeningTime = new TimeOnly(7, 0, 0),
                            SundayClosingTime = new TimeOnly(19, 0, 0),
                            SundayIsWorking = false,
                            SundayOpeningTime = new TimeOnly(7, 0, 0),
                            ThursdayClosingTime = new TimeOnly(19, 0, 0),
                            ThursdayIsWorking = false,
                            ThursdayOpeningTime = new TimeOnly(7, 0, 0),
                            TuesdayClosingTime = new TimeOnly(19, 0, 0),
                            TuesdayIsWorking = false,
                            TuesdayOpeningTime = new TimeOnly(7, 0, 0),
                            WednesdayClosingTime = new TimeOnly(19, 0, 0),
                            WednesdayIsWorking = false,
                            WednesdayOpeningTime = new TimeOnly(7, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("8041bfe3-78b7-406c-91ef-647b066a0b28"),
                            FridayClosingTime = new TimeOnly(19, 0, 0),
                            FridayIsWorking = false,
                            FridayOpeningTime = new TimeOnly(7, 0, 0),
                            MondayClosingTime = new TimeOnly(19, 0, 0),
                            MondayIsWorking = false,
                            MondayOpeningTime = new TimeOnly(7, 0, 0),
                            SalonId = new Guid("13dbc57a-cfdf-4229-8fa5-be7aba0e16e8"),
                            SaturdayClosingTime = new TimeOnly(19, 0, 0),
                            SaturdayIsWorking = false,
                            SaturdayOpeningTime = new TimeOnly(7, 0, 0),
                            SundayClosingTime = new TimeOnly(19, 0, 0),
                            SundayIsWorking = false,
                            SundayOpeningTime = new TimeOnly(7, 0, 0),
                            ThursdayClosingTime = new TimeOnly(19, 0, 0),
                            ThursdayIsWorking = false,
                            ThursdayOpeningTime = new TimeOnly(7, 0, 0),
                            TuesdayClosingTime = new TimeOnly(19, 0, 0),
                            TuesdayIsWorking = false,
                            TuesdayOpeningTime = new TimeOnly(7, 0, 0),
                            WednesdayClosingTime = new TimeOnly(19, 0, 0),
                            WednesdayIsWorking = false,
                            WednesdayOpeningTime = new TimeOnly(7, 0, 0)
                        });
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Services.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<Guid>("SalonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SectionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SalonId");

                    b.HasIndex("SectionId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Services.Section", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SalonId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SalonId");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Services.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("DurationInMinutes")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid>("SalonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SubscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SalonId");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Users.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("7d63bf28-e9a1-4a9e-b2af-afaad758dc43"),
                            ConcurrencyStamp = "588b968f-3fa6-4802-a7c8-5d91eae4eaf2",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = new Guid("711b3c40-484b-4458-959c-46f36fc5d0cb"),
                            ConcurrencyStamp = "867bac41-df3c-49de-97a1-eeb330b930eb",
                            Name = "Owner",
                            NormalizedName = "OWNER"
                        },
                        new
                        {
                            Id = new Guid("840f77c7-db29-4019-b6f6-88c948913945"),
                            ConcurrencyStamp = "4988a881-4017-4d78-8d0e-1b14f2883c65",
                            Name = "Worker",
                            NormalizedName = "WORKER"
                        },
                        new
                        {
                            Id = new Guid("095728b6-906f-4139-b72d-9cf2c9b2a081"),
                            ConcurrencyStamp = "14044e58-decc-4a57-a755-92a06acf9b57",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePictureUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", (string)null);

                    b.HasDiscriminator<string>("UserType").HasValue("Admin");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = new Guid("99aebbfd-56b5-4bb7-bfc3-d258edbd7a10"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "998b2932-7ae3-434f-b553-1b1ee46155fe",
                            Email = "gkerkelov03@abv.bg",
                            EmailConfirmed = true,
                            FirstName = "Georgi",
                            LastName = "Kerkelov",
                            LockoutEnabled = false,
                            NormalizedEmail = "GKERKELOV03@ABV.BG",
                            NormalizedUserName = "GKERKELOV03@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEPpFGW1ooFKngjgsbf9Iz5fvKDFn3JvhVuCYaBIHFMDaQCndZsQvg/8aS9GcAEwRFw==",
                            PhoneNumber = "0895105609",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://res.cloudinary.com/donhvedgr/image/upload/v1662969813/blank-profile-picture_cqowyq.webp",
                            SecurityStamp = "6388d550-2641-45e5-ace6-16953081f4f4",
                            TwoFactorEnabled = false,
                            UserName = "gkerkelov03@abv.bg"
                        },
                        new
                        {
                            Id = new Guid("b8c22ce7-1048-450f-95a9-3d524a27bcaa"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c68474a7-64a5-4224-b273-33331c810f72",
                            Email = "pivanov03@abv.bg",
                            EmailConfirmed = true,
                            FirstName = "Petar",
                            LastName = "Ivanov",
                            LockoutEnabled = false,
                            NormalizedEmail = "PIVANOV03@ABV.BG",
                            NormalizedUserName = "PIVANOV03@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEF1z57UyrAsk7Ihzi7vA/EmNDHWvCqydNxZ0jNOnLKeNd5lZe8DmNXrC6qTJWJCQMQ==",
                            PhoneNumber = "0899829897",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://res.cloudinary.com/donhvedgr/image/upload/v1662969813/blank-profile-picture_cqowyq.webp",
                            SecurityStamp = "8a2d2e35-8561-427f-a27f-55a77c246950",
                            TwoFactorEnabled = false,
                            UserName = "pivanov03@abv.bg"
                        });
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Users.Customer", b =>
                {
                    b.HasBaseType("SmartSalon.Application.Domain.Users.User");

                    b.HasDiscriminator().HasValue("Customer");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Users.Owner", b =>
                {
                    b.HasBaseType("SmartSalon.Application.Domain.Users.User");

                    b.HasDiscriminator().HasValue("Owner");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Users.Worker", b =>
                {
                    b.HasBaseType("SmartSalon.Application.Domain.Users.User");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasDiscriminator().HasValue("Worker");
                });

            modelBuilder.Entity("CurrencySalon", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Salons.Currency", null)
                        .WithMany()
                        .HasForeignKey("OtherAcceptedCurrenciesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartSalon.Application.Domain.Salons.Salon", null)
                        .WithMany()
                        .HasForeignKey("SalonsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("CustomerSubscription", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Users.Customer", null)
                        .WithMany()
                        .HasForeignKey("ActiveCustomersId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartSalon.Application.Domain.Bookings.Subscription", null)
                        .WithMany()
                        .HasForeignKey("SubscriptionsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("JobTitleService", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Salons.JobTitle", null)
                        .WithMany()
                        .HasForeignKey("JobTitlesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartSalon.Application.Domain.Services.Service", null)
                        .WithMany()
                        .HasForeignKey("ServicesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("JobTitleWorker", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Salons.JobTitle", null)
                        .WithMany()
                        .HasForeignKey("JobTitlesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartSalon.Application.Domain.Users.Worker", null)
                        .WithMany()
                        .HasForeignKey("WorkersId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Users.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartSalon.Application.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("OwnerSalon", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Users.Owner", null)
                        .WithMany()
                        .HasForeignKey("OwnersId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartSalon.Application.Domain.Salons.Salon", null)
                        .WithMany()
                        .HasForeignKey("SalonsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SalonWorker", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Salons.Salon", null)
                        .WithMany()
                        .HasForeignKey("SalonsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartSalon.Application.Domain.Users.Worker", null)
                        .WithMany()
                        .HasForeignKey("WorkersId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Bookings.Booking", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Users.Customer", "Customer")
                        .WithMany("Bookings")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartSalon.Application.Domain.Salons.Salon", "Salon")
                        .WithMany()
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartSalon.Application.Domain.Services.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartSalon.Application.Domain.Users.Worker", "Worker")
                        .WithMany("Calendar")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Salon");

                    b.Navigation("Service");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Bookings.SpecialSlot", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Services.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartSalon.Application.Domain.Bookings.Subscription", null)
                        .WithMany("SpecialSlots")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Service");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Bookings.Subscription", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Salons.Salon", "Salon")
                        .WithMany()
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Salon");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Salons.Image", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Salons.Salon", "Salon")
                        .WithMany("Images")
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Salon");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Salons.JobTitle", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Salons.Salon", "Salon")
                        .WithMany("JobTitles")
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Salon");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Salons.Salon", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Salons.Currency", "MainCurrency")
                        .WithMany()
                        .HasForeignKey("MainCurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MainCurrency");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Salons.Specialty", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Salons.Salon", "Salon")
                        .WithMany("Specialties")
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Salon");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Salons.WorkingTime", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Salons.Salon", "Salon")
                        .WithOne("WorkingTime")
                        .HasForeignKey("SmartSalon.Application.Domain.Salons.WorkingTime", "SalonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Salon");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Services.Category", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Salons.Salon", "Salon")
                        .WithMany()
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartSalon.Application.Domain.Services.Section", "Section")
                        .WithMany("Categories")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Salon");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Services.Section", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Salons.Salon", "Salon")
                        .WithMany("Sections")
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Salon");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Services.Service", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Services.Category", "Category")
                        .WithMany("Services")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartSalon.Application.Domain.Salons.Salon", "Salon")
                        .WithMany()
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartSalon.Application.Domain.Bookings.Subscription", null)
                        .WithMany("ServicesIncluded")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Category");

                    b.Navigation("Salon");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Bookings.Subscription", b =>
                {
                    b.Navigation("ServicesIncluded");

                    b.Navigation("SpecialSlots");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Salons.Salon", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("JobTitles");

                    b.Navigation("Sections");

                    b.Navigation("Specialties");

                    b.Navigation("WorkingTime");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Services.Category", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Services.Section", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Users.Customer", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Users.Worker", b =>
                {
                    b.Navigation("Calendar");
                });
#pragma warning restore 612, 618
        }
    }
}
