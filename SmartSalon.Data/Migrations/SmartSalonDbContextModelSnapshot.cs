// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartSalon.Data;

#nullable disable

namespace SmartSalon.Data.Migrations
{
    [DbContext(typeof(SmartSalonDbContext))]
    partial class SmartSalonDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CurrencySalon", b =>
                {
                    b.Property<Guid>("AcceptedCurrenciesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SalonsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AcceptedCurrenciesId", "SalonsId");

                    b.HasIndex("SalonsId");

                    b.ToTable("CurrencySalon");
                });

            modelBuilder.Entity("CustomerSubscription", b =>
                {
                    b.Property<Guid>("ActiveCustomersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubscriptionsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ActiveCustomersId", "SubscriptionsId");

                    b.HasIndex("SubscriptionsId");

                    b.ToTable("CustomerSubscription");
                });

            modelBuilder.Entity("JobTitleWorker", b =>
                {
                    b.Property<Guid>("JobTitlesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WorkersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("JobTitlesId", "WorkersId");

                    b.HasIndex("WorkersId");

                    b.ToTable("JobTitleWorker");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("Logins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("d9b03148-f2b2-4ada-a905-9c17d7fee553"),
                            RoleId = new Guid("ecb2d678-fa1a-4ccc-8447-68a8316eddfe")
                        },
                        new
                        {
                            UserId = new Guid("d9b03148-f2b2-4ada-a905-9c17d7fee553"),
                            RoleId = new Guid("a5df1cb8-a12c-4702-97b9-9cd6e0a8b49c")
                        },
                        new
                        {
                            UserId = new Guid("4f50491d-97be-4704-9981-73932c840f06"),
                            RoleId = new Guid("ecb2d678-fa1a-4ccc-8447-68a8316eddfe")
                        },
                        new
                        {
                            UserId = new Guid("4f50491d-97be-4704-9981-73932c840f06"),
                            RoleId = new Guid("a5df1cb8-a12c-4702-97b9-9cd6e0a8b49c")
                        });
                });

            modelBuilder.Entity("OwnerSalon", b =>
                {
                    b.Property<Guid>("OwnersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SalonsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OwnersId", "SalonsId");

                    b.HasIndex("SalonsId");

                    b.ToTable("OwnerSalon");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Bookings.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<TimeOnly>("From")
                        .HasColumnType("time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("SalonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeOnly>("To")
                        .HasColumnType("time");

                    b.Property<Guid>("WorkerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SalonId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("WorkerId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Bookings.SpecialSlot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<int>("ExpirationInDays")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("From")
                        .HasColumnType("time");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SubscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeOnly>("To")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("SpecialSlots");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Bookings.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AllowedBookingsInAdvance")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<Guid>("SalonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Tier")
                        .HasColumnType("int");

                    b.Property<int>("TimePenaltyInDays")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SalonId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Salons.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ce0a79d4-576a-45dc-b586-89fd5c2c8d17"),
                            Code = "BTC",
                            Name = "Bitcoin"
                        },
                        new
                        {
                            Id = new Guid("29f48a22-650f-4723-9b5e-6fe09cd94184"),
                            Code = "ETH",
                            Name = "Ethereum"
                        },
                        new
                        {
                            Id = new Guid("5e36608f-a7bd-41c2-b665-0313f4696c35"),
                            Code = "USD",
                            Country = "United States",
                            Name = "United States Dollar"
                        },
                        new
                        {
                            Id = new Guid("f6c47b70-4e71-449f-809d-8f9c15b077d7"),
                            Code = "EUR",
                            Country = "Eurozone",
                            Name = "Euro"
                        },
                        new
                        {
                            Id = new Guid("bd1a3fc9-b7cd-4c4a-81f6-d5e8667ff399"),
                            Code = "GBP",
                            Country = "United Kingdom",
                            Name = "British Pound Sterling"
                        },
                        new
                        {
                            Id = new Guid("43de8f45-a288-4efe-adac-521196ce8a15"),
                            Code = "JPY",
                            Country = "Japan",
                            Name = "Japanese Yen"
                        },
                        new
                        {
                            Id = new Guid("94899293-650a-4811-8475-9c84dc984f7e"),
                            Code = "AUD",
                            Country = "Australia",
                            Name = "Australian Dollar"
                        },
                        new
                        {
                            Id = new Guid("c7e789c3-2baf-4658-a5d9-b748e477e203"),
                            Code = "CAD",
                            Country = "Canada",
                            Name = "Canadian Dollar"
                        },
                        new
                        {
                            Id = new Guid("c1fb3bd3-d324-4402-bbe5-d2ff1a0362b4"),
                            Code = "CHF",
                            Country = "Switzerland",
                            Name = "Swiss Franc"
                        },
                        new
                        {
                            Id = new Guid("dde7115c-c6cd-4ae0-9d22-babad842009f"),
                            Code = "CNY",
                            Country = "China",
                            Name = "Chinese Yuan"
                        },
                        new
                        {
                            Id = new Guid("b50b3143-d67c-4fe5-bc14-4ebbe1fe4941"),
                            Code = "INR",
                            Country = "India",
                            Name = "Indian Rupee"
                        },
                        new
                        {
                            Id = new Guid("db55c2d0-902b-4f7f-b022-bc05163fbeda"),
                            Code = "BRL",
                            Country = "Brazil",
                            Name = "Brazilian Real"
                        },
                        new
                        {
                            Id = new Guid("ddbcd921-1af4-4b55-a4e8-de2f146b6d2a"),
                            Code = "KRW",
                            Country = "South Korea",
                            Name = "South Korean Won"
                        },
                        new
                        {
                            Id = new Guid("22319aae-157a-4a6e-b1bb-c59e976d8a87"),
                            Code = "RUB",
                            Country = "Russia",
                            Name = "Russian Ruble"
                        },
                        new
                        {
                            Id = new Guid("f9a5ebe9-5e7c-4fdb-bf66-a080ec08c7f8"),
                            Code = "MXN",
                            Country = "Mexico",
                            Name = "Mexican Peso"
                        },
                        new
                        {
                            Id = new Guid("c50a0d23-5914-49a7-8ed1-93140a44680a"),
                            Code = "ZAR",
                            Country = "South Africa",
                            Name = "South African Rand"
                        },
                        new
                        {
                            Id = new Guid("aa291a82-365f-4351-bf40-e1a8b951e0d7"),
                            Code = "NZD",
                            Country = "New Zealand",
                            Name = "New Zealand Dollar"
                        },
                        new
                        {
                            Id = new Guid("459d87e0-a144-4b4e-8152-5174bff9b5b3"),
                            Code = "SGD",
                            Country = "Singapore",
                            Name = "Singapore Dollar"
                        },
                        new
                        {
                            Id = new Guid("5b4f733d-833c-4a56-b433-97c8e77ad36d"),
                            Code = "HKD",
                            Country = "Hong Kong",
                            Name = "Hong Kong Dollar"
                        },
                        new
                        {
                            Id = new Guid("39a4a983-712c-44f3-9c6c-47b028ca47ea"),
                            Code = "SEK",
                            Country = "Sweden",
                            Name = "Swedish Krona"
                        },
                        new
                        {
                            Id = new Guid("1c195f30-7501-4ba2-be78-020378ff07fe"),
                            Code = "NOK",
                            Country = "Norway",
                            Name = "Norwegian Krone"
                        },
                        new
                        {
                            Id = new Guid("7f4f23ce-f2f9-497f-9e54-3347bb4ed5f1"),
                            Code = "TRY",
                            Country = "Turkey",
                            Name = "Turkish Lira"
                        },
                        new
                        {
                            Id = new Guid("e94357e5-229e-4328-b35a-c382f39094fb"),
                            Code = "ARS",
                            Country = "Argentina",
                            Name = "Argentine Peso"
                        },
                        new
                        {
                            Id = new Guid("6d232084-28a4-4d55-abc2-a597ff1f424c"),
                            Code = "DKK",
                            Country = "Denmark",
                            Name = "Danish Krone"
                        },
                        new
                        {
                            Id = new Guid("e2483757-3e0e-431b-b851-c0a03e6dcf11"),
                            Code = "PLN",
                            Country = "Poland",
                            Name = "Polish Zloty"
                        },
                        new
                        {
                            Id = new Guid("9a210a5f-30c5-4f37-8f18-d3bc1807cb45"),
                            Code = "ILS",
                            Country = "Israel",
                            Name = "Israeli New Shekel"
                        },
                        new
                        {
                            Id = new Guid("a75401b8-7499-4540-9492-ec9c1f193875"),
                            Code = "SAR",
                            Country = "Saudi Arabia",
                            Name = "Saudi Riyal"
                        },
                        new
                        {
                            Id = new Guid("b41269d8-16d0-44e8-8ed6-62d6de3a89c4"),
                            Code = "AED",
                            Country = "United Arab Emirates",
                            Name = "UAE Dirham"
                        },
                        new
                        {
                            Id = new Guid("c0f2dc06-e8bd-4964-b845-bce04bc0a788"),
                            Code = "THB",
                            Country = "Thailand",
                            Name = "Thai Baht"
                        },
                        new
                        {
                            Id = new Guid("740e2271-bca4-4dac-8c8a-fddbd394e5b0"),
                            Code = "MYR",
                            Country = "Malaysia",
                            Name = "Malaysian Ringgit"
                        },
                        new
                        {
                            Id = new Guid("9f23266f-db21-4a62-9355-4be9a5559149"),
                            Code = "IDR",
                            Country = "Indonesia",
                            Name = "Indonesian Rupiah"
                        },
                        new
                        {
                            Id = new Guid("e042095b-25cf-4c31-8546-e9de7187bfea"),
                            Code = "PHP",
                            Country = "Philippines",
                            Name = "Philippine Peso"
                        },
                        new
                        {
                            Id = new Guid("6a51e3bf-02be-47ad-8ee1-6fccbe6a2cf0"),
                            Code = "BGN",
                            Country = "Bulgaria",
                            Name = "Bulgarian Lev"
                        });
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Salons.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("SalonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SalonId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Salons.JobTitle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SalonId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SalonId");

                    b.ToTable("JobTitles");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Salons.Salon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BookingsInAdvance")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("MainCurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SubscriptionsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("TimePenalty")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.Property<bool>("WorkersCanMoveBookings")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("WorkersCanSetNonWorkingPeriods")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<Guid>("WorkingTimeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MainCurrencyId");

                    b.ToTable("Salons");

                    b.HasData(
                        new
                        {
                            Id = new Guid("184c302b-b2d9-4027-a80a-df43343ae85c"),
                            BookingsInAdvance = 5,
                            Description = "Description",
                            IsDeleted = false,
                            Location = "Location",
                            MainCurrencyId = new Guid("6a51e3bf-02be-47ad-8ee1-6fccbe6a2cf0"),
                            Name = "Cosa Nostra",
                            SubscriptionsEnabled = true,
                            TimePenalty = 5,
                            WorkersCanMoveBookings = true,
                            WorkersCanSetNonWorkingPeriods = true,
                            WorkingTimeId = new Guid("2066e2bc-8ec8-4a7f-8067-692982ae183e")
                        },
                        new
                        {
                            Id = new Guid("438ac30e-1f01-479a-851f-d437ae5549c0"),
                            BookingsInAdvance = 5,
                            Description = "Description",
                            IsDeleted = false,
                            Location = "Location",
                            MainCurrencyId = new Guid("6a51e3bf-02be-47ad-8ee1-6fccbe6a2cf0"),
                            Name = "Gosho shop",
                            SubscriptionsEnabled = true,
                            TimePenalty = 5,
                            WorkersCanMoveBookings = true,
                            WorkersCanSetNonWorkingPeriods = true,
                            WorkingTimeId = new Guid("c025bae5-9663-4b7b-ad30-64a3aecd21d6")
                        });
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Salons.Specialty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("SalonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("SalonId");

                    b.ToTable("Specialties");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Salons.WorkingTime", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeOnly>("FridayFrom")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("FridayTo")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("MondayFrom")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("MondayTo")
                        .HasColumnType("time");

                    b.Property<Guid>("SalonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeOnly>("SaturdayFrom")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("SaturdayTo")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("SundayFrom")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("SundayTo")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("ThursdayFrom")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("ThursdayTo")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("TuesdayFrom")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("TuesdayTo")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("WednesdayFrom")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("WednesdayTo")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("SalonId")
                        .IsUnique();

                    b.ToTable("WorkingTimes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2066e2bc-8ec8-4a7f-8067-692982ae183e"),
                            FridayFrom = new TimeOnly(7, 0, 0),
                            FridayTo = new TimeOnly(19, 0, 0),
                            MondayFrom = new TimeOnly(7, 0, 0),
                            MondayTo = new TimeOnly(19, 0, 0),
                            SalonId = new Guid("184c302b-b2d9-4027-a80a-df43343ae85c"),
                            SaturdayFrom = new TimeOnly(7, 0, 0),
                            SaturdayTo = new TimeOnly(19, 0, 0),
                            SundayFrom = new TimeOnly(7, 0, 0),
                            SundayTo = new TimeOnly(19, 0, 0),
                            ThursdayFrom = new TimeOnly(7, 0, 0),
                            ThursdayTo = new TimeOnly(19, 0, 0),
                            TuesdayFrom = new TimeOnly(7, 0, 0),
                            TuesdayTo = new TimeOnly(19, 0, 0),
                            WednesdayFrom = new TimeOnly(7, 0, 0),
                            WednesdayTo = new TimeOnly(19, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("c025bae5-9663-4b7b-ad30-64a3aecd21d6"),
                            FridayFrom = new TimeOnly(7, 0, 0),
                            FridayTo = new TimeOnly(19, 0, 0),
                            MondayFrom = new TimeOnly(7, 0, 0),
                            MondayTo = new TimeOnly(19, 0, 0),
                            SalonId = new Guid("438ac30e-1f01-479a-851f-d437ae5549c0"),
                            SaturdayFrom = new TimeOnly(7, 0, 0),
                            SaturdayTo = new TimeOnly(19, 0, 0),
                            SundayFrom = new TimeOnly(7, 0, 0),
                            SundayTo = new TimeOnly(19, 0, 0),
                            ThursdayFrom = new TimeOnly(7, 0, 0),
                            ThursdayTo = new TimeOnly(19, 0, 0),
                            TuesdayFrom = new TimeOnly(7, 0, 0),
                            TuesdayTo = new TimeOnly(19, 0, 0),
                            WednesdayFrom = new TimeOnly(7, 0, 0),
                            WednesdayTo = new TimeOnly(19, 0, 0)
                        });
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Services.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<Guid>("SalonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SectionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SalonId");

                    b.HasIndex("SectionId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Services.Section", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SalonId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SalonId");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Services.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("DurationInMinutes")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid>("SalonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SubscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SalonId");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Users.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a5df1cb8-a12c-4702-97b9-9cd6e0a8b49c"),
                            ConcurrencyStamp = "0ac870a0-774e-4782-9cd3-5c19a7adac41",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = new Guid("457c5e9d-520c-47fe-a13d-8a3fea5047a2"),
                            ConcurrencyStamp = "650871b0-d6ed-48f5-b1ba-8cb7932bcad5",
                            Name = "Owner",
                            NormalizedName = "OWNER"
                        },
                        new
                        {
                            Id = new Guid("d48b1522-4347-4a46-b630-7f47ff94b8d8"),
                            ConcurrencyStamp = "18f2cb81-868e-4b16-8003-8fc7307e0585",
                            Name = "Worker",
                            NormalizedName = "WORKER"
                        },
                        new
                        {
                            Id = new Guid("ecb2d678-fa1a-4ccc-8447-68a8316eddfe"),
                            ConcurrencyStamp = "23b0a0a8-ff2a-436d-88ac-d5d3408cfabb",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePictureUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", (string)null);

                    b.HasDiscriminator<string>("UserType").HasValue("Admin");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = new Guid("d9b03148-f2b2-4ada-a905-9c17d7fee553"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "674dff82-4d54-42c1-bdb2-9d634d058320",
                            Email = "gkerkelov03@abv.bg",
                            EmailConfirmed = true,
                            FirstName = "Georgi",
                            LastName = "Kerkelov",
                            LockoutEnabled = false,
                            NormalizedEmail = "GKERKELOV03@ABV.BG",
                            NormalizedUserName = "GKERKELOV03@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEBayyRdpkTALTrSE1G8D/RQde3zdlLB9nMkkxhQ/Tx0PjjW0Juoe6VAeCaxQRneCKA==",
                            PhoneNumber = "0895105609",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://res.cloudinary.com/donhvedgr/image/upload/v1662969813/blank-profile-picture_cqowyq.webp",
                            SecurityStamp = "6ed855f5-2c66-4236-a062-8e39943a9ac6",
                            TwoFactorEnabled = false,
                            UserName = "gkerkelov03@abv.bg"
                        },
                        new
                        {
                            Id = new Guid("4f50491d-97be-4704-9981-73932c840f06"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "02ba9a63-38b6-4a27-8922-6293b6913add",
                            Email = "pivanov03@abv.bg",
                            EmailConfirmed = true,
                            FirstName = "Petar",
                            LastName = "Ivanov",
                            LockoutEnabled = false,
                            NormalizedEmail = "PIVANOV03@ABV.BG",
                            NormalizedUserName = "PIVANOV03@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEFH5nqs4OUbXIByUROs2EZOAYzD28r4ezaRltoVbORpzu2okSSVP5HbOjiEDwIpdbQ==",
                            PhoneNumber = "0899829897",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://res.cloudinary.com/donhvedgr/image/upload/v1662969813/blank-profile-picture_cqowyq.webp",
                            SecurityStamp = "be307ba2-c819-4600-ad8a-79d9cc09715a",
                            TwoFactorEnabled = false,
                            UserName = "pivanov03@abv.bg"
                        });
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Users.Customer", b =>
                {
                    b.HasBaseType("SmartSalon.Application.Domain.Users.User");

                    b.HasDiscriminator().HasValue("Customer");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Users.Owner", b =>
                {
                    b.HasBaseType("SmartSalon.Application.Domain.Users.User");

                    b.HasDiscriminator().HasValue("Owner");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Users.Worker", b =>
                {
                    b.HasBaseType("SmartSalon.Application.Domain.Users.User");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("SalonId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("SalonId");

                    b.HasDiscriminator().HasValue("Worker");
                });

            modelBuilder.Entity("CurrencySalon", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Salons.Currency", null)
                        .WithMany()
                        .HasForeignKey("AcceptedCurrenciesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartSalon.Application.Domain.Salons.Salon", null)
                        .WithMany()
                        .HasForeignKey("SalonsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("CustomerSubscription", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Users.Customer", null)
                        .WithMany()
                        .HasForeignKey("ActiveCustomersId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartSalon.Application.Domain.Bookings.Subscription", null)
                        .WithMany()
                        .HasForeignKey("SubscriptionsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("JobTitleWorker", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Salons.JobTitle", null)
                        .WithMany()
                        .HasForeignKey("JobTitlesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartSalon.Application.Domain.Users.Worker", null)
                        .WithMany()
                        .HasForeignKey("WorkersId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Users.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartSalon.Application.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("OwnerSalon", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Users.Owner", null)
                        .WithMany()
                        .HasForeignKey("OwnersId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartSalon.Application.Domain.Salons.Salon", null)
                        .WithMany()
                        .HasForeignKey("SalonsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Bookings.Booking", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Users.Customer", "Customer")
                        .WithMany("Bookings")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartSalon.Application.Domain.Salons.Salon", "Salon")
                        .WithMany()
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartSalon.Application.Domain.Services.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartSalon.Application.Domain.Users.Worker", "Worker")
                        .WithMany("Calendar")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Salon");

                    b.Navigation("Service");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Bookings.SpecialSlot", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Services.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartSalon.Application.Domain.Bookings.Subscription", null)
                        .WithMany("SpecialSlots")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Service");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Bookings.Subscription", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Salons.Salon", "Salon")
                        .WithMany()
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Salon");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Salons.Image", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Salons.Salon", "Salon")
                        .WithMany("Images")
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Salon");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Salons.JobTitle", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Salons.Salon", "Salon")
                        .WithMany("JobTitles")
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Salon");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Salons.Salon", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Salons.Currency", "MainCurrency")
                        .WithMany()
                        .HasForeignKey("MainCurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MainCurrency");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Salons.Specialty", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Salons.Salon", "Salon")
                        .WithMany("Specialties")
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Salon");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Salons.WorkingTime", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Salons.Salon", "Salon")
                        .WithOne("WorkingTime")
                        .HasForeignKey("SmartSalon.Application.Domain.Salons.WorkingTime", "SalonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Salon");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Services.Category", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Salons.Salon", "Salon")
                        .WithMany("Categories")
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartSalon.Application.Domain.Services.Section", "Section")
                        .WithMany("Categories")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Salon");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Services.Section", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Salons.Salon", "Salon")
                        .WithMany("Sections")
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Salon");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Services.Service", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Services.Category", "Category")
                        .WithMany("Services")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartSalon.Application.Domain.Salons.Salon", "Salon")
                        .WithMany("Services")
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartSalon.Application.Domain.Bookings.Subscription", null)
                        .WithMany("ServicesIncluded")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Category");

                    b.Navigation("Salon");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Users.Worker", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Salons.Salon", "Salon")
                        .WithMany("Workers")
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Salon");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Bookings.Subscription", b =>
                {
                    b.Navigation("ServicesIncluded");

                    b.Navigation("SpecialSlots");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Salons.Salon", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Images");

                    b.Navigation("JobTitles");

                    b.Navigation("Sections");

                    b.Navigation("Services");

                    b.Navigation("Specialties");

                    b.Navigation("Workers");

                    b.Navigation("WorkingTime");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Services.Category", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Services.Section", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Users.Customer", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Users.Worker", b =>
                {
                    b.Navigation("Calendar");
                });
#pragma warning restore 612, 618
        }
    }
}
