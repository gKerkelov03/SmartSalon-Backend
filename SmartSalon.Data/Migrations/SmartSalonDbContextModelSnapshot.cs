// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartSalon.Data;

#nullable disable

namespace SmartSalon.Data.Migrations
{
    [DbContext(typeof(SmartSalonDbContext))]
    partial class SmartSalonDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CurrencySalon", b =>
                {
                    b.Property<Guid>("AcceptedCurrenciesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SalonsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AcceptedCurrenciesId", "SalonsId");

                    b.HasIndex("SalonsId");

                    b.ToTable("CurrencySalon");
                });

            modelBuilder.Entity("CustomerSubscription", b =>
                {
                    b.Property<Guid>("ActiveCustomersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubscriptionsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ActiveCustomersId", "SubscriptionsId");

                    b.HasIndex("SubscriptionsId");

                    b.ToTable("CustomerSubscription");
                });

            modelBuilder.Entity("JobTitleWorker", b =>
                {
                    b.Property<Guid>("JobTitlesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WorkersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("JobTitlesId", "WorkersId");

                    b.HasIndex("WorkersId");

                    b.ToTable("JobTitleWorker");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("Logins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("76599f96-903d-4cb8-818a-95ef7fde5ed6"),
                            RoleId = new Guid("ade7d6f6-9525-446c-9e06-f45d637970a2")
                        },
                        new
                        {
                            UserId = new Guid("76599f96-903d-4cb8-818a-95ef7fde5ed6"),
                            RoleId = new Guid("4dab9b99-ff64-4df7-a86d-3045237b9546")
                        },
                        new
                        {
                            UserId = new Guid("caa95241-6c64-48c3-82c4-1f8558872dd4"),
                            RoleId = new Guid("ade7d6f6-9525-446c-9e06-f45d637970a2")
                        },
                        new
                        {
                            UserId = new Guid("caa95241-6c64-48c3-82c4-1f8558872dd4"),
                            RoleId = new Guid("4dab9b99-ff64-4df7-a86d-3045237b9546")
                        });
                });

            modelBuilder.Entity("OwnerSalon", b =>
                {
                    b.Property<Guid>("OwnersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SalonsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OwnersId", "SalonsId");

                    b.HasIndex("SalonsId");

                    b.ToTable("OwnerSalon");
                });

            modelBuilder.Entity("SalonWorker", b =>
                {
                    b.Property<Guid>("SalonsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WorkersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SalonsId", "WorkersId");

                    b.HasIndex("WorkersId");

                    b.ToTable("SalonWorker");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Bookings.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Done")
                        .HasColumnType("bit");

                    b.Property<TimeOnly>("From")
                        .HasColumnType("time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SalonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeOnly>("To")
                        .HasColumnType("time");

                    b.Property<Guid>("WorkerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SalonId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("WorkerId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Bookings.SpecialSlot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<int>("ExpirationInDays")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("From")
                        .HasColumnType("time");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SubscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeOnly>("To")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("SpecialSlots");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Bookings.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AllowedBookingsInAdvance")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<Guid>("SalonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Tier")
                        .HasColumnType("int");

                    b.Property<int>("TimePenaltyInDays")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SalonId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Salons.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3f2c1552-d4be-45bd-85d0-04d503fcc416"),
                            Code = "BTC",
                            Name = "Bitcoin"
                        },
                        new
                        {
                            Id = new Guid("6b659dd6-2da7-4155-8c53-196432f91f49"),
                            Code = "ETH",
                            Name = "Ethereum"
                        },
                        new
                        {
                            Id = new Guid("86116363-9266-4d3b-9995-1bc4ca84d85e"),
                            Code = "USD",
                            Country = "United States",
                            Name = "United States Dollar"
                        },
                        new
                        {
                            Id = new Guid("50d2bc54-df35-49c1-8b9a-2b2a6fb0f984"),
                            Code = "EUR",
                            Country = "Eurozone",
                            Name = "Euro"
                        },
                        new
                        {
                            Id = new Guid("980ca807-343e-45aa-aeda-2024a76307e2"),
                            Code = "GBP",
                            Country = "United Kingdom",
                            Name = "British Pound Sterling"
                        },
                        new
                        {
                            Id = new Guid("79df986c-72f3-4d5f-babe-4a7e3e31f66b"),
                            Code = "JPY",
                            Country = "Japan",
                            Name = "Japanese Yen"
                        },
                        new
                        {
                            Id = new Guid("cadea734-63b9-43c1-ac1d-9bd19bc341d5"),
                            Code = "AUD",
                            Country = "Australia",
                            Name = "Australian Dollar"
                        },
                        new
                        {
                            Id = new Guid("94124332-0228-4eb6-aa04-a8d097e3594b"),
                            Code = "CAD",
                            Country = "Canada",
                            Name = "Canadian Dollar"
                        },
                        new
                        {
                            Id = new Guid("f852f467-4322-45fa-abc8-bc0b29cfa668"),
                            Code = "CHF",
                            Country = "Switzerland",
                            Name = "Swiss Franc"
                        },
                        new
                        {
                            Id = new Guid("071a21d1-bd6b-49a4-8cae-d2010dd95ce5"),
                            Code = "CNY",
                            Country = "China",
                            Name = "Chinese Yuan"
                        },
                        new
                        {
                            Id = new Guid("c58ae5e6-a06b-435d-abc4-00ca75364b31"),
                            Code = "INR",
                            Country = "India",
                            Name = "Indian Rupee"
                        },
                        new
                        {
                            Id = new Guid("080893fe-e916-472d-b2e8-2cb69b2298ad"),
                            Code = "BRL",
                            Country = "Brazil",
                            Name = "Brazilian Real"
                        },
                        new
                        {
                            Id = new Guid("b4635b82-aa1a-4b75-ad01-4b7c3bb79035"),
                            Code = "KRW",
                            Country = "South Korea",
                            Name = "South Korean Won"
                        },
                        new
                        {
                            Id = new Guid("a4cc4b23-c716-4461-8007-463a95967042"),
                            Code = "RUB",
                            Country = "Russia",
                            Name = "Russian Ruble"
                        },
                        new
                        {
                            Id = new Guid("4c8c79c7-d252-4ade-b5e3-521b92a1c534"),
                            Code = "MXN",
                            Country = "Mexico",
                            Name = "Mexican Peso"
                        },
                        new
                        {
                            Id = new Guid("62965c75-fa31-4b75-ac91-4aae76834c06"),
                            Code = "ZAR",
                            Country = "South Africa",
                            Name = "South African Rand"
                        },
                        new
                        {
                            Id = new Guid("91446a43-acee-4f89-abd1-35cdfcb02aa3"),
                            Code = "NZD",
                            Country = "New Zealand",
                            Name = "New Zealand Dollar"
                        },
                        new
                        {
                            Id = new Guid("4868d264-12d0-49e9-b1ac-b096c94794fd"),
                            Code = "SGD",
                            Country = "Singapore",
                            Name = "Singapore Dollar"
                        },
                        new
                        {
                            Id = new Guid("1c4e22f6-d55a-4441-ab97-e9f87255983b"),
                            Code = "HKD",
                            Country = "Hong Kong",
                            Name = "Hong Kong Dollar"
                        },
                        new
                        {
                            Id = new Guid("ce4ea41f-24ff-4495-bcdf-762d3f11b1e4"),
                            Code = "SEK",
                            Country = "Sweden",
                            Name = "Swedish Krona"
                        },
                        new
                        {
                            Id = new Guid("11a257f0-101b-4efe-af08-fe86ca293a50"),
                            Code = "NOK",
                            Country = "Norway",
                            Name = "Norwegian Krone"
                        },
                        new
                        {
                            Id = new Guid("34222c00-6c36-4904-8f18-2b11195fbaf3"),
                            Code = "TRY",
                            Country = "Turkey",
                            Name = "Turkish Lira"
                        },
                        new
                        {
                            Id = new Guid("14d31af8-e264-4bc3-a6bf-315b8f5f86be"),
                            Code = "ARS",
                            Country = "Argentina",
                            Name = "Argentine Peso"
                        },
                        new
                        {
                            Id = new Guid("1e7f65bb-6495-43ed-aa9d-8c7b80acfd11"),
                            Code = "DKK",
                            Country = "Denmark",
                            Name = "Danish Krone"
                        },
                        new
                        {
                            Id = new Guid("52476e17-1824-440d-8faf-6b54ba3638d4"),
                            Code = "PLN",
                            Country = "Poland",
                            Name = "Polish Zloty"
                        },
                        new
                        {
                            Id = new Guid("143b65bd-a7cc-4546-b3b6-97393774d9c2"),
                            Code = "ILS",
                            Country = "Israel",
                            Name = "Israeli New Shekel"
                        },
                        new
                        {
                            Id = new Guid("5a447c0b-7527-444a-a405-66fe52612de8"),
                            Code = "SAR",
                            Country = "Saudi Arabia",
                            Name = "Saudi Riyal"
                        },
                        new
                        {
                            Id = new Guid("b219c361-805c-44be-b423-f9f86f74e485"),
                            Code = "AED",
                            Country = "United Arab Emirates",
                            Name = "UAE Dirham"
                        },
                        new
                        {
                            Id = new Guid("7c8b35ec-95cd-479d-810a-f83bb2c51757"),
                            Code = "THB",
                            Country = "Thailand",
                            Name = "Thai Baht"
                        },
                        new
                        {
                            Id = new Guid("078406ad-7bcc-45f7-a2c4-9b441ce851df"),
                            Code = "MYR",
                            Country = "Malaysia",
                            Name = "Malaysian Ringgit"
                        },
                        new
                        {
                            Id = new Guid("e0007d55-7f0d-459e-9019-a58bd452b2d7"),
                            Code = "IDR",
                            Country = "Indonesia",
                            Name = "Indonesian Rupiah"
                        },
                        new
                        {
                            Id = new Guid("0ee53b88-f387-4e3a-b6f6-ddad12ddc4ac"),
                            Code = "PHP",
                            Country = "Philippines",
                            Name = "Philippine Peso"
                        },
                        new
                        {
                            Id = new Guid("df2cadc8-3222-4829-bdeb-7c046ffcd70d"),
                            Code = "BGN",
                            Country = "Bulgaria",
                            Name = "Bulgarian Lev"
                        });
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Salons.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("SalonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SalonId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Salons.JobTitle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SalonId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SalonId");

                    b.ToTable("JobTitles");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Salons.Salon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BookingsInAdvance")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("MainCurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SubscriptionsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("TimePenalty")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.Property<bool>("WorkersCanDeleteBookings")
                        .HasColumnType("bit");

                    b.Property<bool>("WorkersCanMoveBookings")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("WorkersCanSetNonWorkingPeriods")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<Guid>("WorkingTimeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MainCurrencyId");

                    b.ToTable("Salons");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4478b3a6-9ff9-4287-9399-bda89ff5b599"),
                            BookingsInAdvance = 5,
                            Description = "Description",
                            IsDeleted = false,
                            Location = "Location",
                            MainCurrencyId = new Guid("df2cadc8-3222-4829-bdeb-7c046ffcd70d"),
                            Name = "Cosa Nostra",
                            SubscriptionsEnabled = true,
                            TimePenalty = 5,
                            WorkersCanDeleteBookings = false,
                            WorkersCanMoveBookings = true,
                            WorkersCanSetNonWorkingPeriods = true,
                            WorkingTimeId = new Guid("60cbb27e-d5e6-44a2-98ec-eabbfca37154")
                        },
                        new
                        {
                            Id = new Guid("d7b18c1c-e838-497f-97d1-6fbbc63a792c"),
                            BookingsInAdvance = 5,
                            Description = "Description",
                            IsDeleted = false,
                            Location = "Location",
                            MainCurrencyId = new Guid("df2cadc8-3222-4829-bdeb-7c046ffcd70d"),
                            Name = "Gosho shop",
                            SubscriptionsEnabled = true,
                            TimePenalty = 5,
                            WorkersCanDeleteBookings = false,
                            WorkersCanMoveBookings = true,
                            WorkersCanSetNonWorkingPeriods = true,
                            WorkingTimeId = new Guid("4c5d742e-4651-4724-8ed7-03b34c9b7965")
                        });
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Salons.Specialty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("SalonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("SalonId");

                    b.ToTable("Specialties");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Salons.WorkingTime", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeOnly>("FridayFrom")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("FridayTo")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("MondayFrom")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("MondayTo")
                        .HasColumnType("time");

                    b.Property<Guid>("SalonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeOnly>("SaturdayFrom")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("SaturdayTo")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("SundayFrom")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("SundayTo")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("ThursdayFrom")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("ThursdayTo")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("TuesdayFrom")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("TuesdayTo")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("WednesdayFrom")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("WednesdayTo")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("SalonId")
                        .IsUnique();

                    b.ToTable("WorkingTimes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("60cbb27e-d5e6-44a2-98ec-eabbfca37154"),
                            FridayFrom = new TimeOnly(7, 0, 0),
                            FridayTo = new TimeOnly(19, 0, 0),
                            MondayFrom = new TimeOnly(7, 0, 0),
                            MondayTo = new TimeOnly(19, 0, 0),
                            SalonId = new Guid("4478b3a6-9ff9-4287-9399-bda89ff5b599"),
                            SaturdayFrom = new TimeOnly(7, 0, 0),
                            SaturdayTo = new TimeOnly(19, 0, 0),
                            SundayFrom = new TimeOnly(7, 0, 0),
                            SundayTo = new TimeOnly(19, 0, 0),
                            ThursdayFrom = new TimeOnly(7, 0, 0),
                            ThursdayTo = new TimeOnly(19, 0, 0),
                            TuesdayFrom = new TimeOnly(7, 0, 0),
                            TuesdayTo = new TimeOnly(19, 0, 0),
                            WednesdayFrom = new TimeOnly(7, 0, 0),
                            WednesdayTo = new TimeOnly(19, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("4c5d742e-4651-4724-8ed7-03b34c9b7965"),
                            FridayFrom = new TimeOnly(7, 0, 0),
                            FridayTo = new TimeOnly(19, 0, 0),
                            MondayFrom = new TimeOnly(7, 0, 0),
                            MondayTo = new TimeOnly(19, 0, 0),
                            SalonId = new Guid("d7b18c1c-e838-497f-97d1-6fbbc63a792c"),
                            SaturdayFrom = new TimeOnly(7, 0, 0),
                            SaturdayTo = new TimeOnly(19, 0, 0),
                            SundayFrom = new TimeOnly(7, 0, 0),
                            SundayTo = new TimeOnly(19, 0, 0),
                            ThursdayFrom = new TimeOnly(7, 0, 0),
                            ThursdayTo = new TimeOnly(19, 0, 0),
                            TuesdayFrom = new TimeOnly(7, 0, 0),
                            TuesdayTo = new TimeOnly(19, 0, 0),
                            WednesdayFrom = new TimeOnly(7, 0, 0),
                            WednesdayTo = new TimeOnly(19, 0, 0)
                        });
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Services.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<Guid>("SalonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SectionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SalonId");

                    b.HasIndex("SectionId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Services.Section", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SalonId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SalonId");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Services.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("DurationInMinutes")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid>("SalonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SubscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SalonId");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Users.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("4dab9b99-ff64-4df7-a86d-3045237b9546"),
                            ConcurrencyStamp = "09c3aecd-f14e-4a70-8d24-0dbaa05ed13e",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = new Guid("7157b4a1-1fab-4967-91ae-37bb8d6f4b67"),
                            ConcurrencyStamp = "ec232caf-f29f-4382-984e-a6d56c4b5270",
                            Name = "Owner",
                            NormalizedName = "OWNER"
                        },
                        new
                        {
                            Id = new Guid("eaadcb52-b338-449d-9751-f011ee72b789"),
                            ConcurrencyStamp = "3ed89e36-fcac-44fb-9b42-c335e5808ee0",
                            Name = "Worker",
                            NormalizedName = "WORKER"
                        },
                        new
                        {
                            Id = new Guid("ade7d6f6-9525-446c-9e06-f45d637970a2"),
                            ConcurrencyStamp = "aa4c20a9-a962-460e-ac4f-6147ea89c887",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePictureUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", (string)null);

                    b.HasDiscriminator<string>("UserType").HasValue("Admin");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = new Guid("76599f96-903d-4cb8-818a-95ef7fde5ed6"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0d6b75e0-6b36-4a85-8a4b-65e5ec0e8b1f",
                            Email = "gkerkelov03@abv.bg",
                            EmailConfirmed = true,
                            FirstName = "Georgi",
                            LastName = "Kerkelov",
                            LockoutEnabled = false,
                            NormalizedEmail = "GKERKELOV03@ABV.BG",
                            NormalizedUserName = "GKERKELOV03@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEGJGDaN2YyOqE9oH+Qk+7nS7U52Ktg+o7ceWvVEyTFTvzDpNnVz7NsG9mYizXP1kAw==",
                            PhoneNumber = "0895105609",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://res.cloudinary.com/donhvedgr/image/upload/v1662969813/blank-profile-picture_cqowyq.webp",
                            SecurityStamp = "189f913e-59bc-4bfc-84b1-c4d569b7163c",
                            TwoFactorEnabled = false,
                            UserName = "gkerkelov03@abv.bg"
                        },
                        new
                        {
                            Id = new Guid("caa95241-6c64-48c3-82c4-1f8558872dd4"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eb40f3a4-f52d-41e9-95c6-70f4655bd879",
                            Email = "pivanov03@abv.bg",
                            EmailConfirmed = true,
                            FirstName = "Petar",
                            LastName = "Ivanov",
                            LockoutEnabled = false,
                            NormalizedEmail = "PIVANOV03@ABV.BG",
                            NormalizedUserName = "PIVANOV03@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEClBcbRzt1xamG4jel9jJoK1QraEvzb6/NUuTf/Hv2VO/MklrtZvLQsHSSw1abpMdg==",
                            PhoneNumber = "0899829897",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://res.cloudinary.com/donhvedgr/image/upload/v1662969813/blank-profile-picture_cqowyq.webp",
                            SecurityStamp = "c1d5a94f-12bb-4684-bf88-ed3f5cacc8b3",
                            TwoFactorEnabled = false,
                            UserName = "pivanov03@abv.bg"
                        });
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Users.Customer", b =>
                {
                    b.HasBaseType("SmartSalon.Application.Domain.Users.User");

                    b.HasDiscriminator().HasValue("Customer");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Users.Owner", b =>
                {
                    b.HasBaseType("SmartSalon.Application.Domain.Users.User");

                    b.HasDiscriminator().HasValue("Owner");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Users.Worker", b =>
                {
                    b.HasBaseType("SmartSalon.Application.Domain.Users.User");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasDiscriminator().HasValue("Worker");
                });

            modelBuilder.Entity("CurrencySalon", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Salons.Currency", null)
                        .WithMany()
                        .HasForeignKey("AcceptedCurrenciesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartSalon.Application.Domain.Salons.Salon", null)
                        .WithMany()
                        .HasForeignKey("SalonsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("CustomerSubscription", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Users.Customer", null)
                        .WithMany()
                        .HasForeignKey("ActiveCustomersId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartSalon.Application.Domain.Bookings.Subscription", null)
                        .WithMany()
                        .HasForeignKey("SubscriptionsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("JobTitleWorker", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Salons.JobTitle", null)
                        .WithMany()
                        .HasForeignKey("JobTitlesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartSalon.Application.Domain.Users.Worker", null)
                        .WithMany()
                        .HasForeignKey("WorkersId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Users.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartSalon.Application.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("OwnerSalon", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Users.Owner", null)
                        .WithMany()
                        .HasForeignKey("OwnersId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartSalon.Application.Domain.Salons.Salon", null)
                        .WithMany()
                        .HasForeignKey("SalonsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SalonWorker", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Salons.Salon", null)
                        .WithMany()
                        .HasForeignKey("SalonsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartSalon.Application.Domain.Users.Worker", null)
                        .WithMany()
                        .HasForeignKey("WorkersId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Bookings.Booking", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Users.Customer", "Customer")
                        .WithMany("Bookings")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartSalon.Application.Domain.Salons.Salon", "Salon")
                        .WithMany()
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartSalon.Application.Domain.Services.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartSalon.Application.Domain.Users.Worker", "Worker")
                        .WithMany("Calendar")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Salon");

                    b.Navigation("Service");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Bookings.SpecialSlot", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Services.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartSalon.Application.Domain.Bookings.Subscription", null)
                        .WithMany("SpecialSlots")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Service");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Bookings.Subscription", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Salons.Salon", "Salon")
                        .WithMany()
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Salon");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Salons.Image", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Salons.Salon", "Salon")
                        .WithMany("Images")
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Salon");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Salons.JobTitle", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Salons.Salon", "Salon")
                        .WithMany("JobTitles")
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Salon");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Salons.Salon", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Salons.Currency", "MainCurrency")
                        .WithMany()
                        .HasForeignKey("MainCurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MainCurrency");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Salons.Specialty", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Salons.Salon", "Salon")
                        .WithMany("Specialties")
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Salon");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Salons.WorkingTime", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Salons.Salon", "Salon")
                        .WithOne("WorkingTime")
                        .HasForeignKey("SmartSalon.Application.Domain.Salons.WorkingTime", "SalonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Salon");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Services.Category", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Salons.Salon", "Salon")
                        .WithMany()
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartSalon.Application.Domain.Services.Section", "Section")
                        .WithMany("Categories")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Salon");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Services.Section", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Salons.Salon", "Salon")
                        .WithMany("Sections")
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Salon");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Services.Service", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Services.Category", "Category")
                        .WithMany("Services")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartSalon.Application.Domain.Salons.Salon", "Salon")
                        .WithMany()
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartSalon.Application.Domain.Bookings.Subscription", null)
                        .WithMany("ServicesIncluded")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Category");

                    b.Navigation("Salon");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Bookings.Subscription", b =>
                {
                    b.Navigation("ServicesIncluded");

                    b.Navigation("SpecialSlots");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Salons.Salon", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("JobTitles");

                    b.Navigation("Sections");

                    b.Navigation("Specialties");

                    b.Navigation("WorkingTime");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Services.Category", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Services.Section", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Users.Customer", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Users.Worker", b =>
                {
                    b.Navigation("Calendar");
                });
#pragma warning restore 612, 618
        }
    }
}
