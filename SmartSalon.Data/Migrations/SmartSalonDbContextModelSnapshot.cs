// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartSalon.Data;

#nullable disable

namespace SmartSalon.Data.Migrations
{
    [DbContext(typeof(SmartSalonDbContext))]
    partial class SmartSalonDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CurrencySalon", b =>
                {
                    b.Property<Guid>("OtherAcceptedCurrenciesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SalonsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OtherAcceptedCurrenciesId", "SalonsId");

                    b.HasIndex("SalonsId");

                    b.ToTable("CurrencySalon");
                });

            modelBuilder.Entity("CustomerSubscription", b =>
                {
                    b.Property<Guid>("ActiveCustomersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubscriptionsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ActiveCustomersId", "SubscriptionsId");

                    b.HasIndex("SubscriptionsId");

                    b.ToTable("CustomerSubscription");
                });

            modelBuilder.Entity("JobTitleService", b =>
                {
                    b.Property<Guid>("JobTitlesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServicesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("JobTitlesId", "ServicesId");

                    b.HasIndex("ServicesId");

                    b.ToTable("JobTitleService");
                });

            modelBuilder.Entity("JobTitleWorker", b =>
                {
                    b.Property<Guid>("JobTitlesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WorkersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("JobTitlesId", "WorkersId");

                    b.HasIndex("WorkersId");

                    b.ToTable("JobTitleWorker");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("Logins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("39823949-7e6f-4ee3-8ad5-253f857f7e3d"),
                            RoleId = new Guid("0811b6ca-9120-4a9a-a319-81b75c2b5384")
                        },
                        new
                        {
                            UserId = new Guid("39823949-7e6f-4ee3-8ad5-253f857f7e3d"),
                            RoleId = new Guid("49ae35a5-46f9-4bcd-a22a-07ca86c40215")
                        },
                        new
                        {
                            UserId = new Guid("91f1a014-8285-40bd-86d9-24f968660d3c"),
                            RoleId = new Guid("0811b6ca-9120-4a9a-a319-81b75c2b5384")
                        },
                        new
                        {
                            UserId = new Guid("91f1a014-8285-40bd-86d9-24f968660d3c"),
                            RoleId = new Guid("49ae35a5-46f9-4bcd-a22a-07ca86c40215")
                        });
                });

            modelBuilder.Entity("OwnerSalon", b =>
                {
                    b.Property<Guid>("OwnersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SalonsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OwnersId", "SalonsId");

                    b.HasIndex("SalonsId");

                    b.ToTable("OwnerSalon");
                });

            modelBuilder.Entity("SalonWorker", b =>
                {
                    b.Property<Guid>("SalonsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WorkersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SalonsId", "WorkersId");

                    b.HasIndex("WorkersId");

                    b.ToTable("SalonWorker");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Bookings.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Done")
                        .HasColumnType("bit");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SalonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.Property<Guid>("WorkerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SalonId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("WorkerId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Bookings.SpecialSlot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<int>("ExpirationInDays")
                        .HasColumnType("int");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.Property<Guid?>("SubscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("SpecialSlots");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Bookings.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AllowedBookingsInAdvance")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<Guid>("SalonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Tier")
                        .HasColumnType("int");

                    b.Property<int>("TimePenaltyInDays")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SalonId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Salons.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6ae39df9-5816-4938-9c57-1ed9f0d7a51d"),
                            Code = "BTC",
                            LogoUrl = "https://upload.wikimedia.org/wikipedia/commons/thumb/4/46/Bitcoin.svg/2048px-Bitcoin.svg.png",
                            Name = "Bitcoin"
                        },
                        new
                        {
                            Id = new Guid("075d6f47-b41b-47c7-8a5d-187ac858ed4c"),
                            Code = "ETH",
                            LogoUrl = "https://upload.wikimedia.org/wikipedia/commons/thumb/0/05/Ethereum_logo_2014.svg/1257px-Ethereum_logo_2014.svg.png",
                            Name = "Ethereum"
                        },
                        new
                        {
                            Id = new Guid("13880451-d18f-41b1-9946-814d21130b88"),
                            Code = "USD",
                            Country = "United States",
                            LogoUrl = "https://upload.wikimedia.org/wikipedia/commons/thumb/a/a9/Flag_of_the_United_States_%28DoS_ECA_Color_Standard%29.svg/255px-Flag_of_the_United_States_%28DoS_ECA_Color_Standard%29.svg.png",
                            Name = "United States Dollar"
                        },
                        new
                        {
                            Id = new Guid("7b635565-726b-4508-8031-6b34cbecb6c2"),
                            Code = "EUR",
                            Country = "Eurozone",
                            LogoUrl = "https://upload.wikimedia.org/wikipedia/commons/thumb/b/b7/Flag_of_Europe.svg/255px-Flag_of_Europe.svg.png",
                            Name = "Euro"
                        },
                        new
                        {
                            Id = new Guid("26c1b986-13bc-400f-a544-b084287557f5"),
                            Code = "BGN",
                            Country = "Bulgaria",
                            LogoUrl = "https://upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Flag_of_Bulgaria.svg/255px-Flag_of_Bulgaria.svg.png",
                            Name = "Bulgarian Lev"
                        });
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Salons.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("SalonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SalonId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Salons.JobTitle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SalonId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SalonId");

                    b.ToTable("JobTitles");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Salons.Salon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BookingsInAdvance")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("GoogleMapsLocation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("MainCurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SubscriptionsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("TimePenalty")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.Property<bool>("WorkersCanDeleteBookings")
                        .HasColumnType("bit");

                    b.Property<bool>("WorkersCanMoveBookings")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("WorkersCanSetNonWorkingPeriods")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<Guid>("WorkingTimeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MainCurrencyId");

                    b.ToTable("Salons");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8b0ea877-6e1d-4687-959c-8817947af379"),
                            BookingsInAdvance = 5,
                            Country = "BULGARIA",
                            Description = "Description",
                            GoogleMapsLocation = "Location",
                            IsDeleted = false,
                            MainCurrencyId = new Guid("26c1b986-13bc-400f-a544-b084287557f5"),
                            Name = "Cosa Nostra",
                            SubscriptionsEnabled = true,
                            TimePenalty = 5,
                            WorkersCanDeleteBookings = false,
                            WorkersCanMoveBookings = true,
                            WorkersCanSetNonWorkingPeriods = true,
                            WorkingTimeId = new Guid("db5b5f1e-4097-42b0-b2fa-c8448e9d08c8")
                        },
                        new
                        {
                            Id = new Guid("a4ff11ff-7148-4d10-9fdb-3a02b9fd9fe1"),
                            BookingsInAdvance = 5,
                            Country = "BULGARIA",
                            Description = "Description",
                            GoogleMapsLocation = "Location",
                            IsDeleted = false,
                            MainCurrencyId = new Guid("26c1b986-13bc-400f-a544-b084287557f5"),
                            Name = "Gosho shop",
                            SubscriptionsEnabled = true,
                            TimePenalty = 5,
                            WorkersCanDeleteBookings = false,
                            WorkersCanMoveBookings = true,
                            WorkersCanSetNonWorkingPeriods = true,
                            WorkingTimeId = new Guid("12303ed2-9a20-440e-9c4b-c4aaa23bf3d9")
                        });
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Salons.Specialty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("SalonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("SalonId");

                    b.ToTable("Specialties");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Salons.WorkingTime", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeOnly>("FridayClosingTime")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("FridayOpeningTime")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("MondayClosingTime")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("MondayOpeningTime")
                        .HasColumnType("time");

                    b.Property<Guid>("SalonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeOnly>("SaturdayClosingTime")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("SaturdayOpeningTime")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("SundayClosingTime")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("SundayOpeningTime")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("ThursdayClosingTime")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("ThursdayOpeningTime")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("TuesdayClosingTime")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("TuesdayOpeningTime")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("WednesdayClosingTime")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("WednesdayOpeningTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("SalonId")
                        .IsUnique();

                    b.ToTable("WorkingTimes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("db5b5f1e-4097-42b0-b2fa-c8448e9d08c8"),
                            FridayClosingTime = new TimeOnly(19, 0, 0),
                            FridayOpeningTime = new TimeOnly(7, 0, 0),
                            MondayClosingTime = new TimeOnly(19, 0, 0),
                            MondayOpeningTime = new TimeOnly(7, 0, 0),
                            SalonId = new Guid("8b0ea877-6e1d-4687-959c-8817947af379"),
                            SaturdayClosingTime = new TimeOnly(19, 0, 0),
                            SaturdayOpeningTime = new TimeOnly(7, 0, 0),
                            SundayClosingTime = new TimeOnly(19, 0, 0),
                            SundayOpeningTime = new TimeOnly(7, 0, 0),
                            ThursdayClosingTime = new TimeOnly(19, 0, 0),
                            ThursdayOpeningTime = new TimeOnly(7, 0, 0),
                            TuesdayClosingTime = new TimeOnly(19, 0, 0),
                            TuesdayOpeningTime = new TimeOnly(7, 0, 0),
                            WednesdayClosingTime = new TimeOnly(19, 0, 0),
                            WednesdayOpeningTime = new TimeOnly(7, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("12303ed2-9a20-440e-9c4b-c4aaa23bf3d9"),
                            FridayClosingTime = new TimeOnly(19, 0, 0),
                            FridayOpeningTime = new TimeOnly(7, 0, 0),
                            MondayClosingTime = new TimeOnly(19, 0, 0),
                            MondayOpeningTime = new TimeOnly(7, 0, 0),
                            SalonId = new Guid("a4ff11ff-7148-4d10-9fdb-3a02b9fd9fe1"),
                            SaturdayClosingTime = new TimeOnly(19, 0, 0),
                            SaturdayOpeningTime = new TimeOnly(7, 0, 0),
                            SundayClosingTime = new TimeOnly(19, 0, 0),
                            SundayOpeningTime = new TimeOnly(7, 0, 0),
                            ThursdayClosingTime = new TimeOnly(19, 0, 0),
                            ThursdayOpeningTime = new TimeOnly(7, 0, 0),
                            TuesdayClosingTime = new TimeOnly(19, 0, 0),
                            TuesdayOpeningTime = new TimeOnly(7, 0, 0),
                            WednesdayClosingTime = new TimeOnly(19, 0, 0),
                            WednesdayOpeningTime = new TimeOnly(7, 0, 0)
                        });
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Services.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<Guid>("SalonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SectionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SalonId");

                    b.HasIndex("SectionId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Services.Section", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SalonId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SalonId");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Services.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("DurationInMinutes")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid>("SalonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SubscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SalonId");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Users.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("49ae35a5-46f9-4bcd-a22a-07ca86c40215"),
                            ConcurrencyStamp = "17522d1a-e1b5-4b0f-9920-7a55626c1be5",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = new Guid("11e4a613-bf6c-474c-a308-bb4fa71e1685"),
                            ConcurrencyStamp = "f2124649-5210-49df-a5e4-a47cdeb5a63e",
                            Name = "Owner",
                            NormalizedName = "OWNER"
                        },
                        new
                        {
                            Id = new Guid("00fa2542-7d53-41e0-a548-4ecbc609e186"),
                            ConcurrencyStamp = "5b5cb6f0-c430-4e58-9b4c-43fbadf72bda",
                            Name = "Worker",
                            NormalizedName = "WORKER"
                        },
                        new
                        {
                            Id = new Guid("0811b6ca-9120-4a9a-a319-81b75c2b5384"),
                            ConcurrencyStamp = "c92bebda-0e26-46d9-bbd3-ea617d4e24d7",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePictureUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", (string)null);

                    b.HasDiscriminator<string>("UserType").HasValue("Admin");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = new Guid("39823949-7e6f-4ee3-8ad5-253f857f7e3d"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a866c4a1-1ba4-461b-8dfc-7ba7e329cb30",
                            Email = "gkerkelov03@abv.bg",
                            EmailConfirmed = true,
                            FirstName = "Georgi",
                            LastName = "Kerkelov",
                            LockoutEnabled = false,
                            NormalizedEmail = "GKERKELOV03@ABV.BG",
                            NormalizedUserName = "GKERKELOV03@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAECOTUL90kip8xKrCS6Y1/857GpCEFXUQ4rXyMj94c+gVud38qn/kQHGT9nD6OWp+cw==",
                            PhoneNumber = "0895105609",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://res.cloudinary.com/donhvedgr/image/upload/v1662969813/blank-profile-picture_cqowyq.webp",
                            SecurityStamp = "a277f567-e47b-49c0-9c58-8ea16b53b96b",
                            TwoFactorEnabled = false,
                            UserName = "gkerkelov03@abv.bg"
                        },
                        new
                        {
                            Id = new Guid("91f1a014-8285-40bd-86d9-24f968660d3c"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d3e99ab0-a2b9-4be4-a10d-c090514af36c",
                            Email = "pivanov03@abv.bg",
                            EmailConfirmed = true,
                            FirstName = "Petar",
                            LastName = "Ivanov",
                            LockoutEnabled = false,
                            NormalizedEmail = "PIVANOV03@ABV.BG",
                            NormalizedUserName = "PIVANOV03@ABV.BG",
                            PasswordHash = "AQAAAAIAAYagAAAAEO2zs9aMkqIcfdgrLQw6kkZY7DBZsV63YApAxBnIjWwgKwPzkb/ZcG7v3SNqNqSKWQ==",
                            PhoneNumber = "0899829897",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://res.cloudinary.com/donhvedgr/image/upload/v1662969813/blank-profile-picture_cqowyq.webp",
                            SecurityStamp = "1585a987-f6dc-472d-b6bb-066eed65728e",
                            TwoFactorEnabled = false,
                            UserName = "pivanov03@abv.bg"
                        });
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Users.Customer", b =>
                {
                    b.HasBaseType("SmartSalon.Application.Domain.Users.User");

                    b.HasDiscriminator().HasValue("Customer");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Users.Owner", b =>
                {
                    b.HasBaseType("SmartSalon.Application.Domain.Users.User");

                    b.HasDiscriminator().HasValue("Owner");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Users.Worker", b =>
                {
                    b.HasBaseType("SmartSalon.Application.Domain.Users.User");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasDiscriminator().HasValue("Worker");
                });

            modelBuilder.Entity("CurrencySalon", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Salons.Currency", null)
                        .WithMany()
                        .HasForeignKey("OtherAcceptedCurrenciesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartSalon.Application.Domain.Salons.Salon", null)
                        .WithMany()
                        .HasForeignKey("SalonsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("CustomerSubscription", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Users.Customer", null)
                        .WithMany()
                        .HasForeignKey("ActiveCustomersId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartSalon.Application.Domain.Bookings.Subscription", null)
                        .WithMany()
                        .HasForeignKey("SubscriptionsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("JobTitleService", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Salons.JobTitle", null)
                        .WithMany()
                        .HasForeignKey("JobTitlesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartSalon.Application.Domain.Services.Service", null)
                        .WithMany()
                        .HasForeignKey("ServicesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("JobTitleWorker", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Salons.JobTitle", null)
                        .WithMany()
                        .HasForeignKey("JobTitlesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartSalon.Application.Domain.Users.Worker", null)
                        .WithMany()
                        .HasForeignKey("WorkersId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Users.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartSalon.Application.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("OwnerSalon", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Users.Owner", null)
                        .WithMany()
                        .HasForeignKey("OwnersId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartSalon.Application.Domain.Salons.Salon", null)
                        .WithMany()
                        .HasForeignKey("SalonsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SalonWorker", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Salons.Salon", null)
                        .WithMany()
                        .HasForeignKey("SalonsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartSalon.Application.Domain.Users.Worker", null)
                        .WithMany()
                        .HasForeignKey("WorkersId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Bookings.Booking", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Users.Customer", "Customer")
                        .WithMany("Bookings")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartSalon.Application.Domain.Salons.Salon", "Salon")
                        .WithMany()
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartSalon.Application.Domain.Services.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartSalon.Application.Domain.Users.Worker", "Worker")
                        .WithMany("Calendar")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Salon");

                    b.Navigation("Service");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Bookings.SpecialSlot", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Services.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartSalon.Application.Domain.Bookings.Subscription", null)
                        .WithMany("SpecialSlots")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Service");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Bookings.Subscription", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Salons.Salon", "Salon")
                        .WithMany()
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Salon");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Salons.Image", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Salons.Salon", "Salon")
                        .WithMany("Images")
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Salon");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Salons.JobTitle", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Salons.Salon", "Salon")
                        .WithMany("JobTitles")
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Salon");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Salons.Salon", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Salons.Currency", "MainCurrency")
                        .WithMany()
                        .HasForeignKey("MainCurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MainCurrency");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Salons.Specialty", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Salons.Salon", "Salon")
                        .WithMany("Specialties")
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Salon");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Salons.WorkingTime", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Salons.Salon", "Salon")
                        .WithOne("WorkingTime")
                        .HasForeignKey("SmartSalon.Application.Domain.Salons.WorkingTime", "SalonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Salon");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Services.Category", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Salons.Salon", "Salon")
                        .WithMany()
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartSalon.Application.Domain.Services.Section", "Section")
                        .WithMany("Categories")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Salon");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Services.Section", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Salons.Salon", "Salon")
                        .WithMany("Sections")
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Salon");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Services.Service", b =>
                {
                    b.HasOne("SmartSalon.Application.Domain.Services.Category", "Category")
                        .WithMany("Services")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartSalon.Application.Domain.Salons.Salon", "Salon")
                        .WithMany()
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartSalon.Application.Domain.Bookings.Subscription", null)
                        .WithMany("ServicesIncluded")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Category");

                    b.Navigation("Salon");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Bookings.Subscription", b =>
                {
                    b.Navigation("ServicesIncluded");

                    b.Navigation("SpecialSlots");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Salons.Salon", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("JobTitles");

                    b.Navigation("Sections");

                    b.Navigation("Specialties");

                    b.Navigation("WorkingTime");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Services.Category", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Services.Section", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Users.Customer", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("SmartSalon.Application.Domain.Users.Worker", b =>
                {
                    b.Navigation("Calendar");
                });
#pragma warning restore 612, 618
        }
    }
}
